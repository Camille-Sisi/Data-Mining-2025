[["index.html", "DATA MINING Master Meci - Parcours PISE et CCESE - Option Data", " DATA MINING Master Meci - Parcours PISE et CCESE - Option Data Camille Signoretto, Maîtresse de conférences en économie, Université Paris Cité Février-juin 2025 "],["00-Presentation.html", "Présentation À propos de ce document Prérequis Remerciements Licence", " Présentation À propos de ce document Ce document est la version 2025 du cours de Data Mining dispensé aux étudiants de deuxième année de l’option Data du master MECI parcours PISE et CCESE. Ce cours est partagé avec Claude Grasland, dont vous trouverez la partie à l’adresse suivante : https://claudegrasland.github.io/datamining2025/. Ce document est régulièrement corrigé et mis à jour. La version de référence est disponible en ligne à l’adresse suivante : https://github.com/Camille-Sisi/Data-Mining-2025. Pour toute suggestion ou correction, n’hésitez pas à me contacter par mail. Prérequis Le seul prérequis pour suivre ce document est d’avoir installé R et RStudio sur votre ordinateur. Il s’agit de deux logiciels libres, gratuits, téléchargeables en ligne et fonctionnant sous PC, Mac et Linux. Pour installer R, il suffit de se rendre sur une des pages suivantes1 : Installer R sous Windows Installer R sous Mac Pour installer RStudio, rendez-vous sur la page suivante et téléchargez la version adaptée à votre système : https://www.rstudio.com/products/rstudio/download/#download Remerciements Ce document a bénéficié des suggestions des étudiants qui en ont été les cobayes les premières années. Ce document est généré par l’extension bookdown de Yihui Xie et se base sur le template proposé par Julien Barnier pour introduire des exercices interactifs dans son cours de tidyverse. Licence Ce document est mis à disposition selon les termes de la Licence Creative Commons Attribution - Pas d’Utilisation Commerciale - Partage dans les Mêmes Conditions 4.0 International. Sous Linux, utilisez votre gestionnaire de packages habituel.↩︎ "],["01-Base-de-donnees.html", "Section1 Récupération de la base de données 1.1 Les données du Recensement de la Population (RP) 1.2 Quelles informations intéressantes dans cette base ?", " Section1 Récupération de la base de données On va travailler cette année sur les données du Recensement de la Population (RP). C’est une base de données riche en informations, qui s’appuie sur les enquêtes annuelles du recensement et est produite par l’Insee. Les fichiers mis à disposition sur leur site sont au nombre de 9 : ils rassemblent des informations différentes, sur des espaces géographiques différents (canton ou ville, région), et à des niveaux d’analyse différents (individus, ménages/logements). Les derniers fichiers disponibles portent sur l’année 2021 mais nous allons travailer sur l’année 2019 qui rassemble les enquêtes annuelles du recensement (EAR) des années 2017 à 2021. Avant de rentrer plus dans les détails, on va charger les librairies principales que l’on va utiliser lors de cette séance (si elles ne sont pas installées sur votre RStudio, il faut le faire avant en utilisant la commande install.packages(\"nom.du.package\"), on pourra en appeler d’autres dans les deux sections suivantes. # Chargement des librairies library(tidyverse) library(data.table) library(gt) 1.1 Les données du Recensement de la Population (RP) On va travailler plus précisément à partir du fichier “Individus localisés au canton-ou-ville” qui décrit les caractéristiques des individus et celles des ménages qui les occupent. Les données sont localisées au niveau de la commune et de l’IRIS. On ne va pas s’intéresser à l’ensemble de la France, pour des questions d’intérêt et d’analyse, ainsi que des questions pratiques (ces fichiers étant lourds). On va donc télécharger uniquement ce fichier pour la zone A, c’est-à-dire l’Île-de-France. Le mieux est de télécharger le fichier puis le dézipper directement dans R comme ci-dessous en copiant le lien URL sur le site de l’Insee ; et on le stock dans le dossier “data” de notre projet R. Sinon, il reste possible de le télécharger via internet et de l’enregistrer dans un de vos dossiers bien spécifiés pour le “dézipper” ensuite. download.file(url=&quot;https://www.insee.fr/fr/statistiques/fichier/6544333/RP2019_INDCVIZA_csv.zip&quot;, destfile = &quot;data/RP2019_INDCVIZA_csv.zip&quot;) # Le fichier a donc été téléchargé dans le dossier intitulé &quot;data&quot; du projet R, on va # maintenant le dézipper et enregistrer les fichiers extraits dans le même dossier. unzip(&quot;data/RP2019_INDCVIZA_csv.zip&quot;, exdir = &quot;data&quot;) Il nous reste plus qu’à charger les données dans notre environnement RStudio : pour cela on utilise la commande fread du package data.table (à installer avant), car cela va bien plus vite que les fonctions habituelles du type read.csv lorsqu’on a de gros fichiers. On indique également l’option stringsAsFactors=TRUE pour que les variables caractères soient directement transformées en variables “factor” (dont l’utilité est indéniable dans R, on en reparlera plus loin), et on transforme l’objet obtenu en data.frame. # install.packages(&quot;data.table&quot;) library(data.table) RP &lt;- fread(&quot;data/FD_INDCVIZA_2019.csv&quot;, stringsAsFactors=TRUE) RP &lt;- as.data.frame(RP) On a donc 88 variables et 4 354 518 observations. Pour se renseigner sur les variables de la table, on peut télécharger également le fichier des métadonnées avec la commande read.csv cette fois, ce qui nous permet de voir quelles options sont utiles ici : l’argument sep = nous permet d’indiquer comment sont séparées les informations dans le fichier initial, l’argument encoding = permet que les accents aigus soient compris par R comme tel, et enfin la même option stringsAsFactors=TRUE peut être utilisée ici. # Lecture du fichier de métadonnées meta &lt;- read.csv(file = &#39;data/Varmod_INDCVI_2019.csv&#39;, sep = &quot;;&quot;, encoding = &quot;UTF-8&quot;, stringsAsFactors = TRUE) On peut enregistrer ce fichier, ainsi que celui contenant les métadonnées, dans le dossier R au format RDS. # Enregistrement des fichiers saveRDS(object = RP, file = &quot;data/indiv2019.Rdata&quot;) saveRDS(object = meta, file = &quot;data/meta.Rdata&quot;) 1.2 Quelles informations intéressantes dans cette base ? On peut regarder plus précisément les variables disponibles dans cette base de données à partir de la table de métadonnées : on peut le faire avec la fonction view() et dans ce cas la table s’affichera dans un nouvel onglet dans votre RStudio ; sinon pour l’afficher sur notre document notebook, on peut utiliser la fonction head() et/ou tail() qui affiche respectivement les premières lignes et les dernières lignes de la table. # view(meta) meta %&gt;% head() %&gt;% gt() #La fonction gt() permet un affichage plus joli pour le document html #wryqmfcluo table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #wryqmfcluo thead, #wryqmfcluo tbody, #wryqmfcluo tfoot, #wryqmfcluo tr, #wryqmfcluo td, #wryqmfcluo th { border-style: none; } #wryqmfcluo p { margin: 0; padding: 0; } #wryqmfcluo .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #wryqmfcluo .gt_caption { padding-top: 4px; padding-bottom: 4px; } #wryqmfcluo .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #wryqmfcluo .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #wryqmfcluo .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #wryqmfcluo .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #wryqmfcluo .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #wryqmfcluo .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #wryqmfcluo .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #wryqmfcluo .gt_column_spanner_outer:first-child { padding-left: 0; } #wryqmfcluo .gt_column_spanner_outer:last-child { padding-right: 0; } #wryqmfcluo .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #wryqmfcluo .gt_spanner_row { border-bottom-style: hidden; } #wryqmfcluo .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #wryqmfcluo .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #wryqmfcluo .gt_from_md > :first-child { margin-top: 0; } #wryqmfcluo .gt_from_md > :last-child { margin-bottom: 0; } #wryqmfcluo .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #wryqmfcluo .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #wryqmfcluo .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #wryqmfcluo .gt_row_group_first td { border-top-width: 2px; } #wryqmfcluo .gt_row_group_first th { border-top-width: 2px; } #wryqmfcluo .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #wryqmfcluo .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #wryqmfcluo .gt_first_summary_row.thick { border-top-width: 2px; } #wryqmfcluo .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #wryqmfcluo .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #wryqmfcluo .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #wryqmfcluo .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #wryqmfcluo .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #wryqmfcluo .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #wryqmfcluo .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #wryqmfcluo .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #wryqmfcluo .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #wryqmfcluo .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #wryqmfcluo .gt_left { text-align: left; } #wryqmfcluo .gt_center { text-align: center; } #wryqmfcluo .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #wryqmfcluo .gt_font_normal { font-weight: normal; } #wryqmfcluo .gt_font_bold { font-weight: bold; } #wryqmfcluo .gt_font_italic { font-style: italic; } #wryqmfcluo .gt_super { font-size: 65%; } #wryqmfcluo .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #wryqmfcluo .gt_asterisk { font-size: 100%; vertical-align: 0; } #wryqmfcluo .gt_indent_1 { text-indent: 5px; } #wryqmfcluo .gt_indent_2 { text-indent: 10px; } #wryqmfcluo .gt_indent_3 { text-indent: 15px; } #wryqmfcluo .gt_indent_4 { text-indent: 20px; } #wryqmfcluo .gt_indent_5 { text-indent: 25px; } #wryqmfcluo .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #wryqmfcluo div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } COD_VAR LIB_VAR COD_MOD LIB_MOD TYPE_VAR LONG_VAR CANTVILLE Département, canton-ou-ville du lieu de résidence (pseudo-canton) 0101 Ambérieu-en-Bugey (0101) CHAR 5 CANTVILLE Département, canton-ou-ville du lieu de résidence (pseudo-canton) 0102 Attignat (0102) CHAR 5 CANTVILLE Département, canton-ou-ville du lieu de résidence (pseudo-canton) 0103 Valserhône (0103) CHAR 5 CANTVILLE Département, canton-ou-ville du lieu de résidence (pseudo-canton) 0104 Belley (0104) CHAR 5 CANTVILLE Département, canton-ou-ville du lieu de résidence (pseudo-canton) 0105 Bourg-en-Bresse-1 (0105) CHAR 5 CANTVILLE Département, canton-ou-ville du lieu de résidence (pseudo-canton) 0106 Bourg-en-Bresse-2 (0106) CHAR 5 On peut établir la liste des variables de la base de données en utilisant la fonction levels qui donne les niveaux de la variable “COD_VAR” puisque c’est une variable ‘factor’. levels(meta$COD_VAR) [1] &quot;ACHLR&quot; &quot;AEMMR&quot; &quot;AGED&quot; &quot;AGER20&quot; &quot;AGEREV&quot; &quot;AGEREVQ&quot; [7] &quot;ANAI&quot; &quot;ANEMR&quot; &quot;APAF&quot; &quot;ARM&quot; &quot;ASCEN&quot; &quot;BAIN&quot; [13] &quot;BATI&quot; &quot;CANTVILLE&quot; &quot;CATIRIS&quot; &quot;CATL&quot; &quot;CATPC&quot; &quot;CHAU&quot; [19] &quot;CHFL&quot; &quot;CHOS&quot; &quot;CLIM&quot; &quot;CMBL&quot; &quot;COUPLE&quot; &quot;CS1&quot; [25] &quot;CUIS&quot; &quot;DEPT&quot; &quot;DEROU&quot; &quot;DIPL&quot; &quot;DNAI&quot; &quot;EAU&quot; [31] &quot;EGOUL&quot; &quot;ELEC&quot; &quot;EMPL&quot; &quot;ETUD&quot; &quot;GARL&quot; &quot;HLML&quot; [37] &quot;ILETUD&quot; &quot;ILT&quot; &quot;IMMI&quot; &quot;INAI&quot; &quot;INATC&quot; &quot;INFAM&quot; [43] &quot;INPER&quot; &quot;INPERF&quot; &quot;IPONDI&quot; &quot;IRAN&quot; &quot;IRIS&quot; &quot;LIENF&quot; [49] &quot;LPRF&quot; &quot;LPRM&quot; &quot;METRODOM&quot; &quot;MOCO&quot; &quot;MODV&quot; &quot;NA17&quot; [55] &quot;NA5&quot; &quot;NAIDT&quot; &quot;NBPI&quot; &quot;NE17FR&quot; &quot;NE24FR&quot; &quot;NE3FR&quot; [61] &quot;NE5FR&quot; &quot;NENFR&quot; &quot;NPERR&quot; &quot;NUMF&quot; &quot;NUMMI&quot; &quot;ORIDT&quot; [67] &quot;RECH&quot; &quot;REGION&quot; &quot;SANI&quot; &quot;SANIDOM&quot; &quot;SEXE&quot; &quot;SFM&quot; [73] &quot;STAT_CONJ&quot; &quot;STATR&quot; &quot;STOCD&quot; &quot;SURF&quot; &quot;TACT&quot; &quot;TACTD16&quot; [79] &quot;TP&quot; &quot;TRANS&quot; &quot;TRIRIS&quot; &quot;TYPC&quot; &quot;TYPFC&quot; &quot;TYPL&quot; [85] &quot;TYPMC&quot; &quot;TYPMR&quot; &quot;VOIT&quot; &quot;WC&quot; Les codes des variables n’étant pas très parlant, on va les afficher avec leur intitulé : pour cela, il suffit de repartir de la table meta en sélectionnant les 2 colonnes qui nous intéressent et en n’affichant pas les valeurs dupliquées avec la fonction unique(). meta %&gt;% select(COD_VAR, LIB_VAR) %&gt;% unique() %&gt;% gt() #pnaqxnqide table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #pnaqxnqide thead, #pnaqxnqide tbody, #pnaqxnqide tfoot, #pnaqxnqide tr, #pnaqxnqide td, #pnaqxnqide th { border-style: none; } #pnaqxnqide p { margin: 0; padding: 0; } #pnaqxnqide .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #pnaqxnqide .gt_caption { padding-top: 4px; padding-bottom: 4px; } #pnaqxnqide .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #pnaqxnqide .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #pnaqxnqide .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pnaqxnqide .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pnaqxnqide .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pnaqxnqide .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #pnaqxnqide .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #pnaqxnqide .gt_column_spanner_outer:first-child { padding-left: 0; } #pnaqxnqide .gt_column_spanner_outer:last-child { padding-right: 0; } #pnaqxnqide .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #pnaqxnqide .gt_spanner_row { border-bottom-style: hidden; } #pnaqxnqide .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #pnaqxnqide .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #pnaqxnqide .gt_from_md > :first-child { margin-top: 0; } #pnaqxnqide .gt_from_md > :last-child { margin-bottom: 0; } #pnaqxnqide .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #pnaqxnqide .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #pnaqxnqide .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #pnaqxnqide .gt_row_group_first td { border-top-width: 2px; } #pnaqxnqide .gt_row_group_first th { border-top-width: 2px; } #pnaqxnqide .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pnaqxnqide .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #pnaqxnqide .gt_first_summary_row.thick { border-top-width: 2px; } #pnaqxnqide .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pnaqxnqide .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pnaqxnqide .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #pnaqxnqide .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #pnaqxnqide .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #pnaqxnqide .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pnaqxnqide .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pnaqxnqide .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #pnaqxnqide .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pnaqxnqide .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #pnaqxnqide .gt_left { text-align: left; } #pnaqxnqide .gt_center { text-align: center; } #pnaqxnqide .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #pnaqxnqide .gt_font_normal { font-weight: normal; } #pnaqxnqide .gt_font_bold { font-weight: bold; } #pnaqxnqide .gt_font_italic { font-style: italic; } #pnaqxnqide .gt_super { font-size: 65%; } #pnaqxnqide .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #pnaqxnqide .gt_asterisk { font-size: 100%; vertical-align: 0; } #pnaqxnqide .gt_indent_1 { text-indent: 5px; } #pnaqxnqide .gt_indent_2 { text-indent: 10px; } #pnaqxnqide .gt_indent_3 { text-indent: 15px; } #pnaqxnqide .gt_indent_4 { text-indent: 20px; } #pnaqxnqide .gt_indent_5 { text-indent: 25px; } #pnaqxnqide .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #pnaqxnqide div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } COD_VAR LIB_VAR CANTVILLE Département, canton-ou-ville du lieu de résidence (pseudo-canton) NUMMI Numéro du ménage dans le canton-ou-ville (anonymisé) ACHLR Période regroupée d'achèvement de la construction de la maison ou de l'immeuble AEMMR Année d'emménagement dans le logement (regroupée) AGED Âge détaillé (en différence de millésimes) AGER20 Âge en années révolues (âge au dernier anniversaire) en 13 classes d'âge, détaillées autour de 20 ans AGEREV Âge en années révolues détaillé AGEREVQ Âge quinquennal en années révolues ANAI Année de naissance ANEMR Ancienneté d'emménagement dans le logement (regroupée) APAF Appartenance à une famille ARM Arrondissement municipal de résidence (Paris, Lyon et Marseille) ARM Arrondissement municipal de résidence (Paris,Lyon et Marseille) ASCEN Desserte par un ascenseur BAIN Baignoire ou douche (DOM) BATI Aspect du bâti (DOM) CATIRIS Catégorie de l'IRIS CATL Catégorie de logement CATPC Catégorie de population condensée CHAU Moyen de chauffage du logement (DOM) CHFL Chauffage central du logement (France métropolitaine) CHOS Chauffe-eau solaire (DOM) CLIM Existence d'au moins une pièce climatisée (DOM) CMBL Combustible principal du logement (France métropolitaine) COUPLE Déclaration de vie en couple CS1 Catégorie socioprofessionnelle en 8 postes CUIS Cuisine intérieure avec évier (DOM) DEPT Département du lieu de résidence DEROU Nombre de deux-roues à moteur du ménage (DOM) DIPL Diplôme le plus élevé DNAI Département de naissance (si né en France) EAU Point d'eau potable à l'intérieur du logement (DOM) EGOUL Mode d'évacuation des eaux usées (DOM) ELEC Électricité dans le logement (DOM) EMPL Condition d'emploi ETUD Inscription dans un établissement d'enseignement GARL Emplacement réservé de stationnement HLML Appartenance du logement à un organisme HLM ILETUD Indicateur du lieu d'études ILT Indicateur du lieu de travail IMMI Situation quant à l'immigration INAI Indicateur du lieu de naissance INATC Indicateur de nationalité condensé (Français/Étranger) INFAM Nombre de familles du ménage INPER Nombre de personnes du ménage INPERF Nombre de personnes de la famille IPONDI Poids de l'individu IRAN Indicateur de résidence antérieure au 1er janvier de l'année précédente IRIS Code IRIS du lieu de résidence LIENF Lien familial LPRF Lien à la personne de référence de la famille LPRM Lien à la personne de référence du ménage METRODOM Indicateur Métropole ou DOM du lieu de résidence MOCO Mode de cohabitation MODV Mode de vie NA17 Activité économique en 17 postes (NA - A17) NA5 Activité économique regroupée en 5 postes NAIDT Naissance dans un DOM-TOM-COM NBPI Nombre de pièces du logement NE17FR Nombre d'enfants âgés de 17 ans ou moins de la famille (regroupé) NE24FR Nombre d'enfants âgés de 24 ans ou moins de la famille (regroupé) NE3FR Nombre d'enfants âgés de 3 ans ou moins de la famille (regroupé) NE5FR Nombre d'enfants âgés de 5 ans ou moins de la famille (regroupé) NENFR Nombre d'enfants de la famille (regroupé) NPERR Nombre de personnes du ménage (regroupé) NUMF Numéro de famille ORIDT Originaire d'un DOM-TOM-COM RECH Ancienneté de recherche d'emploi REGION Région du lieu de résidence SANI Installations sanitaires (France métropolitaine) SANIDOM Installations sanitaires (DOM) SEXE Sexe SFM Structure familiale du ménage STATR Statut professionnel regroupé STAT_CONJ Statut conjugal STOCD Statut d'occupation détaillé du logement SURF Superficie du logement TACT Type d'activité TACTD16 Type d'activité détaillé en 16 postes TP Temps de travail TRANS Mode de transport principal le plus souvent utilisé pour aller travailler TRIRIS Code TRIRIS du lieu de résidence TYPC Type de construction TYPFC Type de famille condensé TYPL Type de logement TYPMC Type de ménage regroupé (en 4 postes) TYPMR Type de ménage regroupé (en 9 postes) VOIT Nombre de voitures du ménage WC Présence de W.-C. à l'intérieur du logement (DOM) Ou si on veut les afficher par ordre alphabétique selon le nom de la variable, on peut utiliser la fonction arrange() qui permet de trier une table de données selon la variable indiquée : meta %&gt;% select(COD_VAR, LIB_VAR) %&gt;% unique() %&gt;% arrange(COD_VAR) %&gt;% gt() L’une des difficultés pour l’analyse de cette base de données réside dans les différents niveaux présents : “individu” pour la personne de référence du ménage ; “ménage” regroupant l’ensemble des occupants d’une résidence principale, qu’ils aient ou non des liens de parenté ; “famille” partie d’un ménage comprenant au moins 2 personnes (par exemple, un couple, ou un adulte avec un enfant…) ; et enfin “logement” qui comprend ici les résidences principales et rassemble des informations décrivant les types de logement. Il faut bien comprendre comment utiliser à bon escient ces différents niveaux, en particulier ici le niveau logement : pour toute variable de ce niveau, il faudra utiliser un filtre, c’est-à-dire ne prendre que la personne de référence du ménage (LPRM==\"1\"). Il faut également penser que les données sont pondérées, donc pour sortir des statistiques descriptives, il faut à chaque fois mettre la variable de pondération IPONDI. "],["02-Manipulation-base.html", "Section2 Manipulation de la base 2.1 Format des données - WIDE ou LONG 2.2 Sélectionner un champ réduit de la base, séparer les données", " Section2 Manipulation de la base On peut maintenant regarder à quoi ressemble la table principale, celle des données. RP %&gt;% head() %&gt;% gt() #binppcaunr table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #binppcaunr thead, #binppcaunr tbody, #binppcaunr tfoot, #binppcaunr tr, #binppcaunr td, #binppcaunr th { border-style: none; } #binppcaunr p { margin: 0; padding: 0; } #binppcaunr .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #binppcaunr .gt_caption { padding-top: 4px; padding-bottom: 4px; } #binppcaunr .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #binppcaunr .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #binppcaunr .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #binppcaunr .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #binppcaunr .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #binppcaunr .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #binppcaunr .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #binppcaunr .gt_column_spanner_outer:first-child { padding-left: 0; } #binppcaunr .gt_column_spanner_outer:last-child { padding-right: 0; } #binppcaunr .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #binppcaunr .gt_spanner_row { border-bottom-style: hidden; } #binppcaunr .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #binppcaunr .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #binppcaunr .gt_from_md > :first-child { margin-top: 0; } #binppcaunr .gt_from_md > :last-child { margin-bottom: 0; } #binppcaunr .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #binppcaunr .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #binppcaunr .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #binppcaunr .gt_row_group_first td { border-top-width: 2px; } #binppcaunr .gt_row_group_first th { border-top-width: 2px; } #binppcaunr .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #binppcaunr .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #binppcaunr .gt_first_summary_row.thick { border-top-width: 2px; } #binppcaunr .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #binppcaunr .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #binppcaunr .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #binppcaunr .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #binppcaunr .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #binppcaunr .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #binppcaunr .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #binppcaunr .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #binppcaunr .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #binppcaunr .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #binppcaunr .gt_left { text-align: left; } #binppcaunr .gt_center { text-align: center; } #binppcaunr .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #binppcaunr .gt_font_normal { font-weight: normal; } #binppcaunr .gt_font_bold { font-weight: bold; } #binppcaunr .gt_font_italic { font-style: italic; } #binppcaunr .gt_super { font-size: 65%; } #binppcaunr .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #binppcaunr .gt_asterisk { font-size: 100%; vertical-align: 0; } #binppcaunr .gt_indent_1 { text-indent: 5px; } #binppcaunr .gt_indent_2 { text-indent: 10px; } #binppcaunr .gt_indent_3 { text-indent: 15px; } #binppcaunr .gt_indent_4 { text-indent: 20px; } #binppcaunr .gt_indent_5 { text-indent: 25px; } #binppcaunr .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #binppcaunr div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } CANTVILLE NUMMI ACHLR AEMMR AGED AGER20 AGEREV AGEREVQ ANAI ANEMR APAF ARM ASCEN BAIN BATI CATIRIS CATL CATPC CHAU CHFL CHOS CLIM CMBL COUPLE CS1 CUIS DEPT DEROU DIPL DNAI EAU EGOUL ELEC EMPL ETUD GARL HLML ILETUD ILT IMMI INAI INATC INFAM INPER INPERF IPONDI IRAN IRIS LIENF LPRF LPRM METRODOM MOCO MODV NA17 NA5 NAIDT NBPI NE17FR NE24FR NE3FR NE5FR NENFR NPERR NUMF ORIDT RECH REGION SANI SANIDOM SEXE SFM STAT_CONJ STATR STOCD SURF TACT TACTD16 TP TRANS TRIRIS TYPC TYPFC TYPL TYPMC TYPMR VOIT WC 75ZZ 1 1 9 72 79 72 70 1944 02 0 75115 1 Z Z H 1 0 Z 2 Z Z 2 2 7 Z 75 Z 19 2B Z Z Z ZZ 2 1 2 Z Z 2 3 1 0 1 Z 3.360730 1 751155817 0 0 1 M 32 50 ZZ ZZ 0 04 Z Z Z Z Z 1 Z 0 0 11 2 ZZ 2 12 6 Z 10 4 21 210 Z Z 751501 3 Z 1 1 12 1 Z 75ZZ 2 2 9 59 64 58 55 1958 03 1 75112 2 Z Z H 1 0 Z 3 Z Z 4 1 3 Z 75 Z 17 99 Z Z Z 21 2 2 2 Z 1 1 6 1 1 2 2 3.668459 1 751124512 1 1 1 M 21 40 FZ FZ 30 01 0 0 0 0 0 2 1 0 Z 11 1 ZZ 1 30 3 2 21 1 11 116 1 5 750901 3 2 6 4 41 0 Z 75ZZ 2 2 9 30 29 29 25 1987 03 1 75112 2 Z Z H 1 0 Z 3 Z Z 4 1 3 Z 75 Z 16 99 Z Z Z 21 2 2 2 Z 3 1 6 2 1 2 2 3.668459 1 751124512 1 2 2 M 21 31 MN GU 30 01 0 0 0 0 0 2 1 0 Z 11 1 ZZ 1 30 3 2 21 1 11 111 1 6 750901 3 2 6 4 41 0 Z 75ZZ 3 1 7 82 80 81 80 1938 05 2 75115 1 Z Z H 1 0 Z 2 Z Z 2 1 7 Z 75 Z 14 92 Z Z Z ZZ 2 1 2 Z Z 2 2 1 1 2 2 3.478821 1 751155907 2 2 2 M 21 40 ZZ ZZ 0 03 0 0 0 0 0 2 1 0 9 11 2 ZZ 2 30 1 Z 10 4 21 210 Z Z 751431 3 2 2 4 44 1 Z 75ZZ 3 1 7 86 80 85 85 1934 05 1 75115 1 Z Z H 1 0 Z 2 Z Z 2 1 7 Z 75 Z 14 75 Z Z Z ZZ 2 1 2 Z Z 2 1 1 1 2 2 3.478821 1 751155907 1 1 1 M 21 40 ZZ ZZ 0 03 0 0 0 0 0 2 1 0 9 11 2 ZZ 1 30 1 Z 10 4 21 210 Z Z 751431 3 2 2 4 44 1 Z 75ZZ 4 2 9 1 2 0 0 2019 01 3 75116 1 Z Z H 1 0 Z 2 Z Z 2 2 8 Z 75 Z ZZ 92 Z Z Z ZZ 2 1 2 Z Z 2 2 1 1 3 3 2.776887 Z 751166301 3 3 3 M 12 12 ZZ ZZ 0 04 2 2 2 2 2 3 1 0 Z 11 2 ZZ 1 22 6 Z 30 6 23 230 Z Z 751741 3 1 2 3 32 1 Z La fonction str() ou son équivalent en langage dplyr la fonction glimpse nous donne la liste des variables avec cette fois leur format et leurs modalités (les premières seulement s’il y en a beaucoup). # str(RP) RP %&gt;% glimpse() Rows: 4,354,518 Columns: 88 $ CANTVILLE &lt;fct&gt; 75ZZ, 75ZZ, 75ZZ, 75ZZ, 75ZZ, 75ZZ, 75ZZ, 75ZZ, 75ZZ, 75ZZ, … $ NUMMI &lt;fct&gt; 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7, 7, 7, 7, 8, 9, 10, 10, 1… $ ACHLR &lt;fct&gt; 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 4, 3, 3, 3, 3, 4, 3, 4, 4, 4, … $ AEMMR &lt;fct&gt; 9, 9, 9, 7, 7, 9, 9, 9, 6, 6, 9, 9, 9, 9, 9, 7, 6, 9, 9, 9, … $ AGED &lt;int&gt; 72, 59, 30, 82, 86, 1, 34, 3, 67, 67, 34, 51, 48, 17, 13, 82… $ AGER20 &lt;int&gt; 79, 64, 29, 80, 80, 2, 39, 2, 79, 79, 39, 54, 54, 17, 14, 80… $ AGEREV &lt;int&gt; 72, 58, 29, 81, 85, 0, 33, 2, 67, 66, 33, 50, 47, 16, 12, 81… $ AGEREVQ &lt;int&gt; 70, 55, 25, 80, 85, 0, 30, 0, 65, 65, 30, 50, 45, 15, 10, 80… $ ANAI &lt;int&gt; 1944, 1958, 1987, 1938, 1934, 2019, 1986, 2017, 1950, 1950, … $ ANEMR &lt;fct&gt; 02, 03, 03, 05, 05, 01, 01, 01, 06, 06, 01, 03, 03, 03, 03, … $ APAF &lt;fct&gt; 0, 1, 1, 2, 1, 3, 2, 3, 1, 2, 0, 1, 2, 3, 3, 0, 0, 3, 2, 3, … $ ARM &lt;fct&gt; 75115, 75112, 75112, 75115, 75115, 75116, 75116, 75116, 7511… $ ASCEN &lt;fct&gt; 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, … $ BAIN &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ BATI &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ CATIRIS &lt;fct&gt; H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, … $ CATL &lt;fct&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … $ CATPC &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … $ CHAU &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ CHFL &lt;fct&gt; 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, … $ CHOS &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ CLIM &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ CMBL &lt;fct&gt; 2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 1, 1, 1, 1, … $ COUPLE &lt;int&gt; 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, … $ CS1 &lt;int&gt; 7, 3, 3, 7, 7, 8, 8, 8, 7, 7, 3, 5, 5, 8, 8, 7, 7, 5, 4, 4, … $ CUIS &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ DEPT &lt;int&gt; 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, … $ DEROU &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ DIPL &lt;fct&gt; 19, 17, 16, 14, 14, ZZ, 18, ZZ, 17, 16, 18, 03, 13, 03, ZZ, … $ DNAI &lt;fct&gt; 2B, 99, 99, 92, 75, 92, 92, 92, 92, 92, 49, 99, 99, 93, 75, … $ EAU &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ EGOUL &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ ELEC &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … $ EMPL &lt;fct&gt; ZZ, 21, 21, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, 16, 16, 16, ZZ, ZZ, … $ ETUD &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, … $ GARL &lt;fct&gt; 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, … $ HLML &lt;fct&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, … $ ILETUD &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, 1, 1, Z, Z, Z, Z, Z, … $ ILT &lt;fct&gt; Z, 1, 3, Z, Z, Z, Z, Z, Z, Z, 3, 1, 1, Z, Z, Z, Z, 1, 1, Z, … $ IMMI &lt;int&gt; 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, … $ INAI &lt;int&gt; 3, 6, 6, 2, 1, 2, 2, 2, 2, 2, 3, 6, 6, 2, 1, 1, 2, 3, 3, 3, … $ INATC &lt;int&gt; 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … $ INFAM &lt;fct&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, … $ INPER &lt;fct&gt; 1, 2, 2, 2, 2, 3, 3, 3, 2, 2, 1, 4, 4, 4, 4, 1, 1, 3, 3, 3, … $ INPERF &lt;fct&gt; Z, 2, 2, 2, 2, 3, 3, 3, 2, 2, Z, 4, 4, 4, 4, Z, Z, 3, 3, 3, … $ IPONDI &lt;dbl&gt; 3.360730, 3.668459, 3.668459, 3.478821, 3.478821, 2.776887, … $ IRAN &lt;fct&gt; 1, 1, 1, 1, 1, Z, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … $ IRIS &lt;fct&gt; 751155817, 751124512, 751124512, 751155907, 751155907, 75116… $ LIENF &lt;fct&gt; 0, 1, 1, 2, 1, 3, 2, 3, 1, 2, 0, 1, 2, 3, 3, 0, 0, 3, 2, 3, … $ LPRF &lt;fct&gt; 0, 1, 2, 2, 1, 3, 1, 3, 1, 2, 0, 1, 2, 3, 3, 0, 0, 3, 1, 3, … $ LPRM &lt;fct&gt; 1, 1, 2, 2, 1, 3, 1, 3, 1, 2, 1, 1, 2, 3, 3, 1, 1, 3, 1, 3, … $ METRODOM &lt;fct&gt; M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, … $ MOCO &lt;int&gt; 32, 21, 21, 21, 21, 12, 23, 12, 21, 21, 32, 22, 22, 11, 11, … $ MODV &lt;int&gt; 50, 40, 31, 40, 40, 12, 33, 12, 40, 40, 20, 32, 32, 11, 11, … $ NA17 &lt;fct&gt; ZZ, FZ, MN, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, OQ, MN, MN, ZZ, ZZ, … $ NA5 &lt;fct&gt; ZZ, FZ, GU, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, OQ, GU, GU, ZZ, ZZ, … $ NAIDT &lt;int&gt; 0, 30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 30, 30, 0, 0, 0, 0, 0, 0,… $ NBPI &lt;fct&gt; 04, 01, 01, 03, 03, 04, 04, 04, 08, 08, 01, 03, 03, 03, 03, … $ NE17FR &lt;fct&gt; Z, 0, 0, 0, 0, 2, 2, 2, 0, 0, Z, 2, 2, 2, 2, Z, Z, 0, 0, 0, … $ NE24FR &lt;fct&gt; Z, 0, 0, 0, 0, 2, 2, 2, 0, 0, Z, 2, 2, 2, 2, Z, Z, 1, 1, 1, … $ NE3FR &lt;fct&gt; Z, 0, 0, 0, 0, 2, 2, 2, 0, 0, Z, 0, 0, 0, 0, Z, Z, 0, 0, 0, … $ NE5FR &lt;fct&gt; Z, 0, 0, 0, 0, 2, 2, 2, 0, 0, Z, 0, 0, 0, 0, Z, Z, 0, 0, 0, … $ NENFR &lt;fct&gt; Z, 0, 0, 0, 0, 2, 2, 2, 0, 0, Z, 2, 2, 2, 2, Z, Z, 2, 2, 2, … $ NPERR &lt;fct&gt; 1, 2, 2, 2, 2, 3, 3, 3, 2, 2, 1, 4, 4, 4, 4, 1, 1, 3, 3, 3, … $ NUMF &lt;fct&gt; Z, 1, 1, 1, 1, 1, 1, 1, 1, 1, Z, 1, 1, 1, 1, Z, Z, 1, 1, 1, … $ ORIDT &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … $ RECH &lt;fct&gt; 0, Z, Z, 9, 9, Z, 0, Z, 0, 0, Z, Z, Z, 0, Z, 9, 0, Z, Z, 1, … $ REGION &lt;int&gt; 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, … $ SANI &lt;fct&gt; 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … $ SANIDOM &lt;fct&gt; ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, … $ SEXE &lt;int&gt; 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, … $ SFM &lt;fct&gt; 12, 30, 30, 30, 30, 22, 22, 22, 30, 30, 12, 32, 32, 32, 32, … $ STAT_CONJ &lt;int&gt; 6, 3, 3, 1, 1, 6, 1, 6, 1, 1, 6, 3, 3, 6, 6, 4, 5, 6, 6, 6, … $ STATR &lt;fct&gt; Z, 2, 2, Z, Z, Z, Z, Z, Z, Z, 1, 1, 1, Z, Z, Z, Z, 1, 1, Z, … $ STOCD &lt;fct&gt; 10, 21, 21, 10, 10, 30, 30, 30, 10, 10, 21, 30, 30, 30, 30, … $ SURF &lt;fct&gt; 4, 1, 1, 4, 4, 6, 6, 6, 7, 7, 1, 4, 4, 4, 4, 3, 3, 6, 6, 6, … $ TACT &lt;int&gt; 21, 11, 11, 21, 21, 23, 24, 23, 21, 21, 11, 11, 11, 22, 23, … $ TACTD16 &lt;int&gt; 210, 116, 111, 210, 210, 230, 240, 230, 210, 210, 111, 111, … $ TP &lt;fct&gt; Z, 1, 1, Z, Z, Z, Z, Z, Z, Z, 2, 1, 1, Z, Z, Z, Z, 1, 1, Z, … $ TRANS &lt;fct&gt; Z, 5, 6, Z, Z, Z, Z, Z, Z, Z, 6, 6, 6, Z, Z, Z, Z, 6, 1, Z, … $ TRIRIS &lt;fct&gt; 751501, 750901, 750901, 751431, 751431, 751741, 751741, 7517… $ TYPC &lt;fct&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, … $ TYPFC &lt;fct&gt; Z, 2, 2, 2, 2, 1, 1, 1, 2, 2, Z, 2, 2, 2, 2, Z, Z, 1, 1, 1, … $ TYPL &lt;fct&gt; 1, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … $ TYPMC &lt;fct&gt; 1, 4, 4, 4, 4, 3, 3, 3, 4, 4, 1, 4, 4, 4, 4, 1, 1, 3, 3, 3, … $ TYPMR &lt;fct&gt; 12, 41, 41, 44, 44, 32, 32, 32, 44, 44, 12, 41, 41, 41, 41, … $ VOIT &lt;fct&gt; 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, … $ WC &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, … Les variables sont en format, soit ‘int’ (“integer” - nombres entiers), soit ‘fct’ (“factor”), ou encore ‘dbl’ (“double” - nombres réels). On remarque que la plupart des variables ont des modalités en chiffres et/ou lettres, ce qui signifie qu’il faudra probablement recoder ces modalités pour leur donner des libellés dans nos analyses descriptives (tableaux ou graphiques). Par ailleurs, certaines variables ont été laissées en format ‘integer’ bien que l’on avait mis l’option stringsAsFactors=TRUE lors du chargement des données, or ces chiffres correspondent bien à des modalités d’une variable catégorielle, il faudra donc le corriger ultérieurement. Dernière remarque, si on avait eu des valeurs manquantes sur certaines variables, elles se seraient ici affichées avec la modalité NA, cela ne semble pas le cas, à vérifier par la suite. En revanche, on voit parfois des modalités “z” ou “zz”, il faudra vérifier ce qu’elles indiquent. 2.1 Format des données - WIDE ou LONG La question du format de la table de données est importante, on distingue généralement le format wide du format long : le premier renvoie au cas où chaque ligne correspond a un et un seul individu (ou autre niveau de l’analyse : une entreprise, un ménage, un logement, etc.), et toutes les informations le concernant sont données en colonnes (ce qui peut augmenter rapidement le nombre de colonnes), c’est l’exemple d’une information que l’on a sur plusieurs années, chaque colonne correspondant à l’information de l’année en question ; le second, au contraire, multiplie les lignes pour un seul individu, mais il y a alors moins de colonnes, à partir du même exemple précédent, il y aura cette fois une colonne indiquant l’année et une colonne contenant l’information. Ici, chaque ligne correspond à un individu auquel est associé un logement, un ménage ou encore une famille ; on est bien dans un format wide. L’unité statistique de base est donc l’individu, mais on peut vouloir choisir de se mettre au niveau logement ou ménage ou famille, pour étudier les caractéristiques de ces unités. Autre exemple, on peut aussi considérer que notre niveau d’analyse est la commune, on verra alors qu’on dispose de plusieurs lignes par commune et si l’on veut garder quelques informations à ce niveau en n’ayant plus qu’une ligne par commune, il faudra sommer ces informations. Le package tidyverse contient deux fonctions qui permettent de passer d’un format à un autre : pivot_longer() et pivot_wider() présentés en détails ici. Nous aurons l’occasion de les utiliser ultérieurement dans ce cours. 2.2 Sélectionner un champ réduit de la base, séparer les données Manipuler une base de données, c’est aussi travailler ou créer une table réduite, surtout quand on a des données volumineuses comme ici : c’est donc choisir un champ particulier de la base. On peut par exemple choisir un champ géographique plus réduit au sein de l’Île-de-France, à partir de la commune : Paris et sa petite couronne. On peut aussi choisir de séparer les données en créant 2 tables selon l’unité statistique : l’individu ; ou le logement avec la seule personne de référence du ménage. Comme vous le savez très probablement, dans le langage tidyverse, pour faire des sélections sur les lignes ou observations dans une table de données, on utilise la fonction filter() ; pour faire des sélections sur les colonnes ou variables, on utilise la fonction select() ; pour supprimer des variables, on utilise également select() avec un “-” devant la (ou les) variable(s) à supprimer (dans le langage R de base, on peut aussi utiliser la fonction subset()). EXERCICES : Créer trois nouvelles bases selon les indications suivantes : la première que vous nommerez “RP_Paris” et qui rassemblera les données pour le seul département de Paris ; la deuxième que nous nommerez “RP_indiv” et qui comprendra les données pour les seules variables décrivant l’individu (et ce sera celle de la personne de référence du ménage) ; la troisième que vous nommerez “RP_final”, qui rassemblera les données pour les départements de Paris et de sa petite couronne, et qui comprendra toutes les variables décrivant l’individu, le logement et enfin les variables géographiques. RP_Paris &lt;- RP %&gt;% filter(DEPT == &quot;75&quot;) RP_indiv &lt;- RP %&gt;% select(&quot;AEMMR&quot;, &quot;AGED&quot;, &quot;AGER20&quot;, &quot;AGEREV&quot;,&quot;AGEREVQ&quot;,&quot;ANAI&quot;, &quot;ANEMR&quot;,&quot;APAF&quot;,&quot;COUPLE&quot;,&quot;CS1&quot;,&quot;DIPL&quot;,&quot;DNAI&quot;,&quot;EMPL&quot;, &quot;ETUD&quot;,&quot;ILETUD&quot;,&quot;ILT&quot;,&quot;IMMI&quot;,&quot;INAI&quot;,&quot;INATC&quot;,&quot;IPONDI&quot;, &quot;IRAN&quot;,&quot;LPRF&quot;,&quot;LPRM&quot;,&quot;MOCO&quot;,&quot;MODV&quot;,&quot;NA17&quot;, &quot;NA5&quot;,&quot;NAIDT&quot;,&quot;ORIDT&quot;,&quot;RECH&quot;,&quot;SEXE&quot;,&quot;STAT_CONJ&quot;, &quot;STATR&quot;,&quot;TACT&quot;,&quot;TACTD16&quot;,&quot;TP&quot;,&quot;TRANS&quot;) RP_final &lt;- RP %&gt;% filter(DEPT %in% c(&quot;75&quot;,&quot;92&quot;,&quot;93&quot;,&quot;94&quot;)) %&gt;% select(-c(&quot;NUMMI&quot;,&quot;INPERF&quot;,&quot;DEROU&quot;,&quot;LIENF&quot;,&quot;INFAM&quot;, &quot;NE17FR&quot;,&quot;INPER&quot;, &quot;NE24FR&quot;,&quot;NPERR&quot;, &quot;NE3FR&quot;, &quot;SFM&quot;, &quot;NE5FR&quot;, &quot;TYPMC&quot;, &quot;NENFR&quot;,&quot;TYPMR&quot;, &quot;NUMF&quot;,&quot;VOIT&quot;, &quot;TYPFC&quot;)) On va dorénavant travailler sur cette dernière table RP_final, on l’enregistre donc dans notre dossier “data”, ainsi que le fichier meta que nous avons modifié précédemments : # Enregistrement des fichiers saveRDS(object = RP_final , file = &quot;data/RP_final.Rdata&quot;) saveRDS(object = meta, file = &quot;data/meta.Rdata&quot;) "],["03-Manipulation-variables.html", "Section3 Manipulation des variables 3.1 Manipulation des variables qualitatives 3.2 Manipulation des variables quantitatives", " Section3 Manipulation des variables Dans la manipulation des variables, l’une des premières choses à réaliser est de les définir dans le bon format, variables quantitatives/continues ou variables qualitatives/catégorielles. On l’a vu dans la section précédente, certaines variables sont encore codées comme des nombres entiers (“integer”) alors que ce sont des variables catégorielles. On va donc corriger cela en regardant d’abord quelles variables sont concernées, en les sélectionnant avec select_if() ou select(where()) : RP_final %&gt;% select_if(is.numeric) %&gt;% names() [1] &quot;AGED&quot; &quot;AGER20&quot; &quot;AGEREV&quot; &quot;AGEREVQ&quot; &quot;ANAI&quot; &quot;CATPC&quot; [7] &quot;COUPLE&quot; &quot;CS1&quot; &quot;DEPT&quot; &quot;ETUD&quot; &quot;IMMI&quot; &quot;INAI&quot; [13] &quot;INATC&quot; &quot;IPONDI&quot; &quot;MOCO&quot; &quot;MODV&quot; &quot;NAIDT&quot; &quot;ORIDT&quot; [19] &quot;REGION&quot; &quot;SEXE&quot; &quot;STAT_CONJ&quot; &quot;TACT&quot; &quot;TACTD16&quot; A part les variables d’âge AGED et AGEREV, de date de naissance ANAI et de pondération IPONDI, toutes les autres variables devraient en format “factor”. Deux façons de les transformer, soit vous changer les variables une à une en utilisant les fonctions mutate() et as.factor() ; soit vous créer une liste avec le nom des variables dont le format doit être transformer et vous utilisez la fonction lapply() en l’appliquant à cette liste de variables : # 1ère méthode # RP_final &lt;- RP_final %&gt;% mutate(AGER20=as.factor(AGER20), # AGEREVQ=as.factor(AGEREVQ), # CATPC=as.factor(CATPC), # COUPLE=as.factor(COUPLE), # CS1=as.factor(CS1), # DEPT=as.factor(DEPT), # ETUD=as.factor(ETUD), # IMMI=as.factor(IMMI), # INAI=as.factor(INAI), # INATC=as.factor(INATC), # MOCO=as.factor(MOCO), # MODV=as.factor(MODV), # NAIDT=as.factor(NAIDT), # ORIDT=as.factor(ORIDT), # REGION=as.factor(REGION), # SEXE=as.factor(SEXE), # STAT_CONJ=as.factor(STAT_CONJ), # TACT=as.factor(TACT), # TACTD16=as.factor(TACTD16)) # 2nde méthode list_var &lt;- c(&quot;AGER20&quot;, &quot;AGEREVQ&quot;, &quot;CATPC&quot;, &quot;COUPLE&quot;, &quot;CS1&quot;, &quot;DEPT&quot;, &quot;ETUD&quot;, &quot;IMMI&quot;, &quot;INAI&quot;, &quot;INATC&quot;, &quot;MOCO&quot;, &quot;MODV&quot;, &quot;NAIDT&quot;, &quot;ORIDT&quot;, &quot;REGION&quot;, &quot;SEXE&quot;, &quot;STAT_CONJ&quot;, &quot;TACT&quot;, &quot;TACTD16&quot;) RP_final[, list_var] &lt;- lapply(RP_final[, list_var], factor) On peut ensuite vérifier que ces variables sont bien des variables facteurs en regardant combien de modalités elles ont et quelles sont-elles. Par exemple, pour la variable CATPC : nlevels(RP_final$CATPC) [1] 3 levels(RP_final$CATPC) [1] &quot;0&quot; &quot;1&quot; &quot;2&quot; Si nous n’avions pas mis l’option transformant les variables caractères en variables facteurs lors du chargement des données, nous pourrions le faire maintenant en utilisant la fonction mutate_if ou la combinaison de mutate et across(where()) comme ceci RP %&gt;% mutate_if(is.character, as.factor) ou RP %&gt;% mutate(across(.cols = where(is.character), .fns = as.factor)). On peut enfin vérifier quelles sont les variables numériques qui restent : # RP_final %&gt;% select_if(is.numeric) %&gt;% head() %&gt;% gt() RP_final %&gt;% select(where(is.numeric)) %&gt;% head() %&gt;% gt() #cbwzrvvrct table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #cbwzrvvrct thead, #cbwzrvvrct tbody, #cbwzrvvrct tfoot, #cbwzrvvrct tr, #cbwzrvvrct td, #cbwzrvvrct th { border-style: none; } #cbwzrvvrct p { margin: 0; padding: 0; } #cbwzrvvrct .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #cbwzrvvrct .gt_caption { padding-top: 4px; padding-bottom: 4px; } #cbwzrvvrct .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #cbwzrvvrct .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #cbwzrvvrct .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #cbwzrvvrct .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #cbwzrvvrct .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #cbwzrvvrct .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #cbwzrvvrct .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #cbwzrvvrct .gt_column_spanner_outer:first-child { padding-left: 0; } #cbwzrvvrct .gt_column_spanner_outer:last-child { padding-right: 0; } #cbwzrvvrct .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #cbwzrvvrct .gt_spanner_row { border-bottom-style: hidden; } #cbwzrvvrct .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #cbwzrvvrct .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #cbwzrvvrct .gt_from_md > :first-child { margin-top: 0; } #cbwzrvvrct .gt_from_md > :last-child { margin-bottom: 0; } #cbwzrvvrct .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #cbwzrvvrct .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #cbwzrvvrct .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #cbwzrvvrct .gt_row_group_first td { border-top-width: 2px; } #cbwzrvvrct .gt_row_group_first th { border-top-width: 2px; } #cbwzrvvrct .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #cbwzrvvrct .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #cbwzrvvrct .gt_first_summary_row.thick { border-top-width: 2px; } #cbwzrvvrct .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #cbwzrvvrct .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #cbwzrvvrct .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #cbwzrvvrct .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #cbwzrvvrct .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #cbwzrvvrct .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #cbwzrvvrct .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #cbwzrvvrct .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #cbwzrvvrct .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #cbwzrvvrct .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #cbwzrvvrct .gt_left { text-align: left; } #cbwzrvvrct .gt_center { text-align: center; } #cbwzrvvrct .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #cbwzrvvrct .gt_font_normal { font-weight: normal; } #cbwzrvvrct .gt_font_bold { font-weight: bold; } #cbwzrvvrct .gt_font_italic { font-style: italic; } #cbwzrvvrct .gt_super { font-size: 65%; } #cbwzrvvrct .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #cbwzrvvrct .gt_asterisk { font-size: 100%; vertical-align: 0; } #cbwzrvvrct .gt_indent_1 { text-indent: 5px; } #cbwzrvvrct .gt_indent_2 { text-indent: 10px; } #cbwzrvvrct .gt_indent_3 { text-indent: 15px; } #cbwzrvvrct .gt_indent_4 { text-indent: 20px; } #cbwzrvvrct .gt_indent_5 { text-indent: 25px; } #cbwzrvvrct .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #cbwzrvvrct div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } AGED AGEREV ANAI IPONDI 72 72 1944 3.360730 59 58 1958 3.668459 30 29 1987 3.668459 82 81 1938 3.478821 86 85 1934 3.478821 1 0 2019 2.776887 Plus généralement, il est souvent d’usage d’utiliser la fonction summary() pour donner un aperçu de l’ensemble des variables, soit de leur distribution pour les variables quantitatives, soit de leur répartition par modalités pour les variables qualitatives ; la fonction permet également de nous donner l’information sur l’existence et le nombre de valeurs manquantes pour chaque variable. summary(RP_final) CANTVILLE ACHLR AEMMR AGED 75ZZ : 853167 3 :687155 9 :2032861 Min. : 0.00 9296 : 47490 4 :656626 8 : 286192 1st Qu.: 21.00 9398 : 43375 2 :314367 7 : 146463 Median : 36.00 9399 : 43104 1 :303570 6 : 91377 Mean : 38.44 9499 : 37585 6 :301595 Z : 34562 3rd Qu.: 55.00 9299 : 36678 5 :270547 5 : 30169 Max. :120.00 (Other):1574634 (Other):102173 (Other): 14409 AGER20 AGEREV AGEREVQ ANAI 54 :515753 Min. : 0.0 25 : 226438 Min. :1896 39 :412404 1st Qu.: 20.0 30 : 214781 1st Qu.:1963 64 :273384 Median : 36.0 35 : 197623 Median :1981 79 :263157 Mean : 37.5 20 : 186496 Mean :1980 29 :226438 3rd Qu.: 54.0 40 : 181466 3rd Qu.:1997 24 :186496 Max. :119.0 0 : 177322 Max. :2020 (Other):758401 (Other):1451907 ANEMR APAF ARM ASCEN BAIN 01 :655689 3 :777547 ZZZZZ :1782866 1:1460332 X: 34562 03 :564056 0 :643516 75115 : 90717 2:1141139 Z:2601471 02 :542791 2 :620004 75118 : 78739 Z: 34562 00 :317238 1 :539040 75120 : 75863 04 :256066 Z : 34562 75119 : 73388 05 :140210 6 : 8547 75113 : 70196 (Other):159983 (Other): 12817 (Other): 464264 BATI CATIRIS CATL CATPC CHAU CHFL X: 34562 A: 29884 1:2601471 0:2601471 X: 34562 1:1370090 Z:2601471 D: 1488 Z: 34562 1: 26328 Z:2601471 2: 654195 H:2597963 2: 8234 3: 563224 X: 988 4: 13962 Z: 5710 X: 34562 CHOS CLIM CMBL COUPLE CS1 CUIS X: 34562 X: 34562 1: 583799 1:1091726 8 :903563 X: 34562 Z:2601471 Z:2601471 2:1060384 2:1544307 3 :457534 Z:2601471 3: 117844 7 :374763 4: 764429 5 :343737 5: 7861 4 :323394 6: 67154 6 :162434 X: 34562 (Other): 70608 DEPT DIPL DNAI EAU EGOUL 75:853167 18 :486255 99 :716703 X: 34562 X: 34562 92:621663 ZZ :465748 75 :538277 Z:2601471 Z:2601471 93:629049 17 :280471 92 :262709 94:532154 13 :252762 93 :241894 14 :252350 94 :185218 16 :197267 78 : 37782 (Other):701180 (Other):653450 ELEC EMPL ETUD GARL HLML X: 34562 ZZ :1432384 1: 689558 1:1286127 1: 784089 Z:2601471 16 : 913146 2:1946475 2:1315344 2:1817382 15 : 104235 Z: 34562 Z: 34562 21 : 86275 22 : 48699 11 : 25485 (Other): 25809 ILETUD ILT IMMI INAI INATC Z :1946475 Z :1432384 1: 614842 1:738724 1:2180430 1 : 484682 3 : 533246 2:2021191 2:614762 2: 455603 3 : 114507 1 : 449857 3:518740 2 : 76273 2 : 204924 4: 45574 4 : 13812 4 : 12853 5: 1530 5 : 167 7 : 2524 6:716703 (Other): 117 (Other): 245 IPONDI IRAN IRIS LPRF Min. : 0.000 1 :2305666 920120303: 6961 0:643516 1st Qu.: 1.103 2 : 112053 ZZZZZZZZZ: 5710 1:654441 Median : 2.933 4 : 69107 930700109: 5523 2:517420 Mean : 2.596 3 : 40599 751187110: 4104 3:762238 3rd Qu.: 3.404 Z : 38020 920360501: 3818 4: 17410 Max. :30.057 5 : 34401 751176714: 3807 5: 6446 (Other): 36187 (Other) :2606110 Z: 34562 LPRM METRODOM MOCO MODV 1 :1209833 M:2636033 22 :585580 32 :585580 3 : 763890 11 :569579 11 :569579 2 : 513339 32 :526421 50 :321174 8 : 38136 21 :449260 40 :291436 Z : 34562 12 :216515 12 :216515 6 : 32123 23 :137021 20 :205247 (Other): 44150 (Other):151657 (Other):446502 NA17 NA5 NAIDT NBPI ZZ :1432384 AZ: 626 0 :1872226 03 :773582 OQ : 316215 BE: 68660 30 : 716703 04 :628152 MN : 223963 FZ: 50464 11 : 18616 02 :491816 GZ : 129585 GU: 767684 12 : 16979 05 :284228 JZ : 101100 OQ: 316215 14 : 5933 01 :263674 KZ : 78928 ZZ:1432384 13 : 3526 06 : 97433 (Other): 353858 (Other): 2050 (Other): 97148 ORIDT RECH REGION SANI SANIDOM 0 :2570233 0: 595136 11:2636033 0: 17248 XX: 34562 11 : 26547 1: 99394 1: 148161 ZZ:2601471 12 : 23668 2: 81634 2:2436062 14 : 8155 9: 189296 X: 34562 13 : 4671 Z:1670573 18 : 908 (Other): 1851 SEXE STAT_CONJ STATR STOCD SURF TACT 1:1263098 1: 806273 1:1067681 10:992691 4 :736488 11:1203649 2:1372935 2: 90782 2: 135968 21:627380 3 :583150 12: 179713 3: 229555 Z:1432384 22:757862 5 :440798 21: 382445 4: 101992 23:151152 1 :239343 22: 240715 5: 137488 30: 72386 2 :233363 23: 465748 6:1269943 ZZ: 34562 6 :189749 24: 64030 (Other):213142 25: 99733 TACTD16 TP TRANS TRIRIS TYPC 111 :1127202 1:1026823 1: 39223 ZZZZZZ : 47639 1: 259226 230 : 465748 2: 176826 2: 102898 931411 : 10563 2: 194433 210 : 382445 Z:1432384 3: 40772 920331 : 8408 3:2124270 220 : 240715 4: 44362 931071 : 8032 4: 22451 122 : 127564 5: 311836 940721 : 7834 5: 1091 250 : 99733 6: 664558 921011 : 7686 Z: 34562 (Other): 192626 Z:1432384 (Other):2545871 TYPL WC 1: 330946 X: 34562 2:2220098 Z:2601471 3: 25394 4: 15607 5: 1942 6: 7484 Z: 34562 Mais attention, le problème ici est que cela nous donne des fréquences non pondérées pour l’ensemble de nos variables qualitatives, donc qui n’ont finalement pas grand sens. 3.1 Manipulation des variables qualitatives On peut d’abord travailler sur les variables qualitatives qui correspondent ici à l’essentiel de nos variables. Comme on le sait, on peut regarder les différents niveaux pour chacune d’entre elles, avec la fonction levels(). Si on veut appliquer la fonction à l’ensemble de nos variables facteurs sans avoir donc à les indiquer une par une, on peut avoir recours à la fonction sapply() qui permet d’appliquer la fonction indiquée entre parenthèses (ici levels()) à tous les éléments de notre table de données. # Pour info, ici cela s&#39;écrirait : RP_final %&gt;% select(where(is.factor)) %&gt;% sapply(levels) # on peut même se passer de la sélection sur les variables : # RP %&gt;% sapply(levels) On peut ensuite vouloir retravailler les modalités de ces variables, car par exemple les modalités ne sont pas parlantes puisque nommées par des codes chiffres, ou parce que les modalités sont trop nombreuses et qu’on souhaiterait les rassembler pour une analyse ultérieure. Par exemple, si l’on veut étudier la répartition de la population francilienne selon leur statut d’activité, on peut utiliser la variable TACT: levels(RP_final$TACT) [1] &quot;11&quot; &quot;12&quot; &quot;21&quot; &quot;22&quot; &quot;23&quot; &quot;24&quot; &quot;25&quot; Mais le moins qu’on puisse dire c’est que les 7 modalités de cette variable ne sont pas parlantes, on peut donc recoder les modalités de cette variable dans une étape préalable DATA comme ici ; on pourra bien sûr enchaîner plus tard les lignes de codes et réaliser cette étape dans une même procédure avec le tableau ou le graphique représentant cette variable. Commençons ici par l’étape DATA : # On cherche à quoi correspondent les modalités chiffrées de cette variable # dans le fichier &quot;meta&quot; meta %&gt;% filter(COD_VAR==&quot;TACT&quot;) %&gt;% select(COD_MOD, LIB_MOD) # A tibble: 7 × 2 COD_MOD LIB_MOD &lt;fct&gt; &lt;fct&gt; 1 11 Actifs ayant un emploi, y compris sous apprentissage ou en stage rému… 2 12 Chômeurs 3 21 Retraités ou préretraités 4 22 Élèves, étudiants, stagiaires non rémunéré de 14 ans ou plus 5 23 Moins de 14 ans 6 24 Femmes ou hommes au foyer 7 25 Autres inactifs # On recode à partir de ces libellés, tout en regroupant certaines modalités # qui sont très spécifiques et nous intéressent moins : RP_final &lt;- RP_final %&gt;% mutate(TACT_moda = as.factor( case_when(TACT == &quot;11&quot; ~ &quot;Actifs en emploi&quot;, TACT == &quot;12&quot; ~ &quot;Chômeurs&quot;, TACT == &quot;21&quot; ~ &quot;Retraités&quot;, TACT %in% c(&quot;22&quot;,&quot;23&quot;,&quot;24&quot;,&quot;25&quot;) ~ &quot;Autres inactifs&quot;))) levels(RP_final$TACT_moda) [1] &quot;Actifs en emploi&quot; &quot;Autres inactifs&quot; &quot;Chômeurs&quot; &quot;Retraités&quot; Si l’on veut changer l’ordre des modalités, qui s’afficheront comme ci-dessus dans un tableau ou un graphique, on peut utiliser la fonction fct_relevel() du package forcats (à installer avant puis à appeler avant de l’utiliser) : # install.package(&quot;forcats&quot;) library(forcats) RP_final &lt;- RP_final %&gt;% mutate(TACT_moda = fct_relevel(TACT_moda, c(&quot;Actifs en emploi&quot;,&quot;Chômeurs&quot;, &quot;Retraités&quot;, &quot;Autres inactifs&quot;))) levels(RP_final$TACT_moda) [1] &quot;Actifs en emploi&quot; &quot;Chômeurs&quot; &quot;Retraités&quot; &quot;Autres inactifs&quot; Plus largement, pour travailler sur des variables qualitatives en particulier lorsqu’elles sont en format facteur, le package forcats est très utile. Outre une fonction de transformation d’une variable caractère en facteur (as_factor() proche de la version de baseR as.factor() utilisée en début de section), elle contient plein d’autres fonctions : fct_collapse() utilisée pour renommer ou regrouper des modalités d’une variable (au lieu de la double fonction as.factor() et case_when()) ; fct_relevel() utilisée également au-dessus pour trier les modalités comme on le souhaite ; fct_drop() pour enlever des niveaux de facteurs vides/sans effectifs ; fct_explicit_na() pour rendre les NA explicites en créant une modalité “(missing)” ; fct_reorder() et fct_reorder2() pour réordonner les modalités d’une variable, très utile pour les graphiques car utilisables directement dans ggplot() ; fct_lump() pour regrouper les modalités les plus communes (ou au contraire les moins communes) en lui indiquant entre parenthèses le nombre n= de modalités souhaitées ou la proportion minimum souhaitée prop=, et en sélectionnant la variable avec la fonction pull() avant car elle doit être en format vecteur et non data.frame ; ou encore fct_recode() pour changer le niveau des facteurs ; fct_other() ; fct_infreq() et fct_inorder() ; etc. Un bon récapitulatif de ces fonctions est présenté ici. 3.2 Manipulation des variables quantitatives Comme nous l’avons vu plus haut, il y a peu de variables quantitatives dans cette base et l’une d’entre elles est la pondération, donc on va regarder plus précisément la variable AGED. Cependant, celle-ci aussi est particulière car c’est une variable numérique constituée d’entiers naturels (et non de valeurs réelles) qui vont de 0 à 120 ; dans le fichier des métadonnées (ou le dictionnaire des variables disponible également sur le site de l’Insee), on se rend compte que la variable a été pensée comme catégorielle avec des modalités d’abord codées comme “000”, “001”, etc. meta %&gt;% filter(COD_VAR==&quot;AGED&quot;) %&gt;% select(COD_MOD, LIB_MOD) %&gt;% tail() # A tibble: 6 × 2 COD_MOD LIB_MOD &lt;fct&gt; &lt;fct&gt; 1 115 115 ans 2 116 116 ans 3 117 117 ans 4 118 118 ans 5 119 119 ans 6 120 120 ans On peut alors regarder rapidement la distribution de cette variable. summary(RP_final$AGED) Min. 1st Qu. Median Mean 3rd Qu. Max. 0.00 21.00 36.00 38.44 55.00 120.00 On peut aussi construire des variables continues en agrégeant certaines informations au niveau des communes par exemple. Reprenons la variable d’activité dont nous avons recoder et regrouper les modalités et calculons-là pour avoir le nombre de chaque modalité par commune. Il faut pour cela créer la variable de commune, qu’on appelera COM, à partir de l’IRIS : RP_final &lt;- RP_final %&gt;% mutate(COM=substr(IRIS, 1, 5)) On va ensuite sommer chaque modalité de la variable TACT_moda en utilisant la pondération en groupant par commune. EXERCICE : Créer donc un tableau qui aura 3 colonnes COM, TACT_moda et n. Vous pouvez utiliser les fonctions group_by suivi soit de count, soit de summarise ; on cherchera finalement à arrondir ces valeurs à l’unité avec la fonction round(). Vous devez obtenir le tableau suivant : Tab_com_TACT &lt;- RP_final %&gt;% group_by(COM) %&gt;% count(TACT_moda, wt=IPONDI) %&gt;% mutate(n=round(n)) # RP_final %&gt;% group_by(COM, TACT_moda) %&gt;% # summarise(n=sum(IPONDI)) %&gt;% # mutate(n=round(n)) On voit qu’on a un tableau dans un format “long” puisqu’il y a plusieurs observations pour une seule commune. On va utiliser la fonction pivot_wider() mentionnée précédemment pour n’avoir qu’une ligne par commune et en colonne les types de statut avec leur nombre respectif. Tab_com_TACT &lt;- Tab_com_TACT %&gt;% pivot_wider(names_from = TACT_moda, values_from = n) Tab_com_TACT # A tibble: 137 × 5 COM `Actifs en emploi` Chômeurs Retraités `Autres inactifs` &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 75101 8366 941 2630 3979 2 75102 13118 1378 2148 4964 3 75103 19239 2085 4589 8123 4 75104 15227 1863 4508 7513 5 75105 27378 2611 10607 17618 6 75106 18073 1842 8180 12176 7 75107 23394 2165 9573 13735 8 75108 18254 1565 5297 10534 9 75109 34155 3482 7264 15125 10 75110 46454 6343 10645 23078 # ℹ 127 more rows 3.2.1 Détecter et “visualiser” les valeurs manquantes Pour travailler sur les valeurs manquantes et valeurs aberrantes de variables quantitatives, on va s’appuyer sur une autre base de données, plus pertinente pour cela. Vous la trouverez sur l’espace de cours sur Moodle : il s’agit d’une extraction de la base de données JOCAS de la Dares (cf. ici) qui compile les offres d’emploi de l’année 2020 à partir de laquelle nous avons sélectionné les offres provenant de Pôle emploi (nouvellement France Travail) pour les communes de Paris et sa petite couronne. Une fois copiée dans le dossier “data/” du projet R, ouvrons cette base de données et commençons l’exploration de ses variables et de leurs valeurs manquantes : OffresPE_2020 &lt;- readRDS(file =&quot;data/OffresPE_2020.Rdata&quot;) OffresPE_2020 %&gt;% head() %&gt;% gt() #aruzeemnxi table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #aruzeemnxi thead, #aruzeemnxi tbody, #aruzeemnxi tfoot, #aruzeemnxi tr, #aruzeemnxi td, #aruzeemnxi th { border-style: none; } #aruzeemnxi p { margin: 0; padding: 0; } #aruzeemnxi .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #aruzeemnxi .gt_caption { padding-top: 4px; padding-bottom: 4px; } #aruzeemnxi .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #aruzeemnxi .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #aruzeemnxi .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #aruzeemnxi .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #aruzeemnxi .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #aruzeemnxi .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #aruzeemnxi .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #aruzeemnxi .gt_column_spanner_outer:first-child { padding-left: 0; } #aruzeemnxi .gt_column_spanner_outer:last-child { padding-right: 0; } #aruzeemnxi .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #aruzeemnxi .gt_spanner_row { border-bottom-style: hidden; } #aruzeemnxi .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #aruzeemnxi .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #aruzeemnxi .gt_from_md > :first-child { margin-top: 0; } #aruzeemnxi .gt_from_md > :last-child { margin-bottom: 0; } #aruzeemnxi .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #aruzeemnxi .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #aruzeemnxi .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #aruzeemnxi .gt_row_group_first td { border-top-width: 2px; } #aruzeemnxi .gt_row_group_first th { border-top-width: 2px; } #aruzeemnxi .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #aruzeemnxi .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #aruzeemnxi .gt_first_summary_row.thick { border-top-width: 2px; } #aruzeemnxi .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #aruzeemnxi .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #aruzeemnxi .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #aruzeemnxi .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #aruzeemnxi .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #aruzeemnxi .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #aruzeemnxi .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #aruzeemnxi .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #aruzeemnxi .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #aruzeemnxi .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #aruzeemnxi .gt_left { text-align: left; } #aruzeemnxi .gt_center { text-align: center; } #aruzeemnxi .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #aruzeemnxi .gt_font_normal { font-weight: normal; } #aruzeemnxi .gt_font_bold { font-weight: bold; } #aruzeemnxi .gt_font_italic { font-style: italic; } #aruzeemnxi .gt_super { font-size: 65%; } #aruzeemnxi .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #aruzeemnxi .gt_asterisk { font-size: 100%; vertical-align: 0; } #aruzeemnxi .gt_indent_1 { text-indent: 5px; } #aruzeemnxi .gt_indent_2 { text-indent: 10px; } #aruzeemnxi .gt_indent_3 { text-indent: 15px; } #aruzeemnxi .gt_indent_4 { text-indent: 20px; } #aruzeemnxi .gt_indent_5 { text-indent: 25px; } #aruzeemnxi .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #aruzeemnxi div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } date_firstSeenDay date_scraping date_sitePublicationDay job_title job_ROME_code job_qualification contractType contractDuration_min contractDuration_max contractDuration_period contractDuration_value workTime_hours workTime_category workTime_value location_label location_zipcode location_departement salary_min salary_max salary_period salary_value salary_hourly_mean salary_hourly_min salary_hourly_max entreprise_nom entrepriseSecteur_NAF88 entrepriseSecteur_NAF21 teleworking_mentioned experience_min experience_max education_level 2020-01-01 Thu Jan 02 14:06:14 2020 2020-01-01 Ménagère/ménager à domicile (H/F) K1304 NA CDD 6 6 MONTH 130 NA PARIS 02 75002 75 NA NA NA NA NA NA Particulier Employeur 97 T FALSE 0 NA [] 2020-01-01 Thu Jan 02 14:06:14 2020 2020-01-01 Dessinateur / Dessinatrice d'exécution du BTP (H/F) F1104 9 CDI NA NA NA 35H FULL_TIME_INFER 35 PUTEAUX 92800 92 28000 32000 YEAR 18.67 18.67 17.43 19.92 Human Talent NA FALSE 1 NA [] 2020-01-01 Thu Jan 02 14:06:14 2020 2020-01-01 Secrétaire juridique (H/F) M1607 9 CDI NA NA NA 35H FULL_TIME_INFER 35 ISSY LES MOULINEAUX 92130 92 30000 42000 YEAR 22.41 22.41 18.67 26.14 ProJob Carrières NA FALSE 3 NA ['Bac+2 ou équivalents'] 2020-01-01 Thu Jan 02 14:06:15 2020 2020-01-01 Garde d'enfant à domicile (H/F) K1303 NA CDD 9 9 MONTH 195 NA PARIS 10 75010 75 NA NA NA NA NA NA Particulier Employeur 97 T FALSE 0 NA [] 2020-01-01 Thu Jan 02 14:06:15 2020 2020-01-01 Baby-sitter (H/F) K1303 NA CDD 2 2 MONTH 43 NA PARIS 17 75017 75 NA NA NA NA NA NA Particulier Employeur 97 T FALSE 0 NA [] 2020-01-01 Thu Jan 02 14:06:15 2020 2020-01-01 Baby-sitter (H/F) K1303 NA CDD 8 8 MONTH 173 NA JOINVILLE LE PONT 94340 94 NA NA NA NA NA NA Particulier Employeur 97 T FALSE 0 NA [] summary(OffresPE_2020) date_firstSeenDay date_scraping date_sitePublicationDay Min. :2020-01-01 Length:420523 Min. :2020-01-01 1st Qu.:2020-03-09 Class :character 1st Qu.:2020-03-09 Median :2020-06-29 Mode :character Median :2020-06-29 Mean :2020-06-18 Mean :2020-06-18 3rd Qu.:2020-09-16 3rd Qu.:2020-09-16 Max. :2020-12-31 Max. :2020-12-31 job_title job_ROME_code job_qualification contractType Length:420523 Length:420523 Min. :1.00 Length:420523 Class :character Class :character 1st Qu.:6.00 Class :character Mode :character Mode :character Median :7.00 Mode :character Mean :6.78 3rd Qu.:8.00 Max. :9.00 NA&#39;s :305296 contractDuration_min contractDuration_max contractDuration_period Min. : 1.0 Min. : 1.0 Length:420523 1st Qu.: 3.0 1st Qu.: 3.0 Class :character Median : 6.0 Median : 6.0 Mode :character Mean : 8.5 Mean : 8.5 3rd Qu.:10.0 3rd Qu.:10.0 Max. :99.0 Max. :99.0 NA&#39;s :328334 NA&#39;s :328334 contractDuration_value workTime_hours workTime_category workTime_value Min. : 1.0 Length:420523 Length:420523 Min. : 1.0 1st Qu.: 65.0 Class :character Class :character 1st Qu.:35.0 Median : 130.0 Mode :character Mode :character Median :35.0 Mean : 147.6 Mean :31.3 3rd Qu.: 195.0 3rd Qu.:35.0 Max. :20656.0 Max. :56.0 NA&#39;s :328383 NA&#39;s :332206 location_label location_zipcode location_departement salary_min Length:420523 Min. :75000 Length:420523 Min. : 3 Class :character 1st Qu.:75006 Class :character 1st Qu.: 1550 Mode :character Median :92150 Mode :character Median : 2165 Mean :86066 Mean : 14480 3rd Qu.:93120 3rd Qu.: 30000 Max. :95926 Max. :500000 NA&#39;s :68798 NA&#39;s :319455 salary_max salary_period salary_value salary_hourly_mean Min. : 7 Length:420523 Min. : 0.2 Min. : 0.2 1st Qu.: 2000 Class :character 1st Qu.: 11.5 1st Qu.: 11.6 Median : 3700 Mode :character Median : 14.8 Median : 15.0 Mean : 21255 Mean : 20.1 Mean : 20.1 3rd Qu.: 39000 3rd Qu.: 21.0 3rd Qu.: 21.2 Max. :500000 Max. :40200.0 Max. :40200.0 NA&#39;s :352552 NA&#39;s :319923 NA&#39;s :319923 salary_hourly_min salary_hourly_max entreprise_nom entrepriseSecteur_NAF88 Min. : 0.1 Min. : 0.2 Length:420523 Min. : 1.00 1st Qu.: 11.1 1st Qu.: 13.7 Class :character 1st Qu.:70.00 Median : 13.9 Median : 17.8 Mode :character Median :78.00 Mean : 18.1 Mean : 24.4 Mean :74.44 3rd Qu.: 19.8 3rd Qu.: 24.9 3rd Qu.:85.00 Max. :39600.0 Max. :40800.0 Max. :99.00 NA&#39;s :319923 NA&#39;s :352834 NA&#39;s :285597 entrepriseSecteur_NAF21 teleworking_mentioned experience_min Length:420523 Mode :logical Min. : 0.000 Class :character FALSE:417778 1st Qu.: 0.000 Mode :character TRUE :2745 Median : 0.000 Mean : 1.137 3rd Qu.: 2.000 Max. :35.000 NA&#39;s :316 experience_max education_level Min. : 0.2 Length:420523 1st Qu.: 2.0 Class :character Median : 5.0 Mode :character Mean : 4.5 3rd Qu.: 5.0 Max. :99.0 NA&#39;s :381324 Avec le head(), on remarque néanmoins que certaines variables ont des cellules vides (sans valeur ni ‘NA’), ce sont également des valeurs manquantes, c’est par exemple le cas pour la variable ‘contractDuration_period’, nous verrons après si les packages gérant les valeurs manquantes détectent également ces cellules vides. La fonction summary() permet donc de donner une première information sur les valeurs manquantes des différentes variables. Pour se concentrer sur cette seule information, on peut compter le nombre de valeurs manquantes NA pour chacune des variables avec la fonction colSums() ; pour les avoir en proportion du nombre total d’observations (lignes), on peut utiliser la fonction colMeans() ; sinon, on peut utiliser la fonction summarise combinée avec across(where()), ) si l’on veut sélectionner uniquement les variables numériques et leur appliquer la fonction sommant les NA : colSums(is.na(OffresPE_2020)) date_firstSeenDay date_scraping date_sitePublicationDay 0 0 0 job_title job_ROME_code job_qualification 0 0 305296 contractType contractDuration_min contractDuration_max 0 328334 328334 contractDuration_period contractDuration_value workTime_hours 0 328383 0 workTime_category workTime_value location_label 0 332206 0 location_zipcode location_departement salary_min 68798 0 319455 salary_max salary_period salary_value 352552 0 319923 salary_hourly_mean salary_hourly_min salary_hourly_max 319923 319923 352834 entreprise_nom entrepriseSecteur_NAF88 entrepriseSecteur_NAF21 0 285597 0 teleworking_mentioned experience_min experience_max 0 316 381324 education_level 0 # Pour les avoir en proportion par rapport au nombre total d&#39;observations # et arrondies à 2 chiffres après la virgule : round(colMeans(is.na(OffresPE_2020)*100), 2) date_firstSeenDay date_scraping date_sitePublicationDay 0.00 0.00 0.00 job_title job_ROME_code job_qualification 0.00 0.00 72.60 contractType contractDuration_min contractDuration_max 0.00 78.08 78.08 contractDuration_period contractDuration_value workTime_hours 0.00 78.09 0.00 workTime_category workTime_value location_label 0.00 79.00 0.00 location_zipcode location_departement salary_min 16.36 0.00 75.97 salary_max salary_period salary_value 83.84 0.00 76.08 salary_hourly_mean salary_hourly_min salary_hourly_max 76.08 76.08 83.90 entreprise_nom entrepriseSecteur_NAF88 entrepriseSecteur_NAF21 0.00 67.91 0.00 teleworking_mentioned experience_min experience_max 0.00 0.08 90.68 education_level 0.00 # Ou en langage tidyverse sur les seules variables numériques : OffresPE_2020 %&gt;% summarise(across(.cols = where(is.numeric), .fns = ~ sum(is.na(.)))) %&gt;% gt() #gaqwssgooi table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #gaqwssgooi thead, #gaqwssgooi tbody, #gaqwssgooi tfoot, #gaqwssgooi tr, #gaqwssgooi td, #gaqwssgooi th { border-style: none; } #gaqwssgooi p { margin: 0; padding: 0; } #gaqwssgooi .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #gaqwssgooi .gt_caption { padding-top: 4px; padding-bottom: 4px; } #gaqwssgooi .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #gaqwssgooi .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #gaqwssgooi .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #gaqwssgooi .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #gaqwssgooi .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #gaqwssgooi .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #gaqwssgooi .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #gaqwssgooi .gt_column_spanner_outer:first-child { padding-left: 0; } #gaqwssgooi .gt_column_spanner_outer:last-child { padding-right: 0; } #gaqwssgooi .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #gaqwssgooi .gt_spanner_row { border-bottom-style: hidden; } #gaqwssgooi .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #gaqwssgooi .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #gaqwssgooi .gt_from_md > :first-child { margin-top: 0; } #gaqwssgooi .gt_from_md > :last-child { margin-bottom: 0; } #gaqwssgooi .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #gaqwssgooi .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #gaqwssgooi .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #gaqwssgooi .gt_row_group_first td { border-top-width: 2px; } #gaqwssgooi .gt_row_group_first th { border-top-width: 2px; } #gaqwssgooi .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #gaqwssgooi .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #gaqwssgooi .gt_first_summary_row.thick { border-top-width: 2px; } #gaqwssgooi .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #gaqwssgooi .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #gaqwssgooi .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #gaqwssgooi .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #gaqwssgooi .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #gaqwssgooi .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #gaqwssgooi .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #gaqwssgooi .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #gaqwssgooi .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #gaqwssgooi .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #gaqwssgooi .gt_left { text-align: left; } #gaqwssgooi .gt_center { text-align: center; } #gaqwssgooi .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #gaqwssgooi .gt_font_normal { font-weight: normal; } #gaqwssgooi .gt_font_bold { font-weight: bold; } #gaqwssgooi .gt_font_italic { font-style: italic; } #gaqwssgooi .gt_super { font-size: 65%; } #gaqwssgooi .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #gaqwssgooi .gt_asterisk { font-size: 100%; vertical-align: 0; } #gaqwssgooi .gt_indent_1 { text-indent: 5px; } #gaqwssgooi .gt_indent_2 { text-indent: 10px; } #gaqwssgooi .gt_indent_3 { text-indent: 15px; } #gaqwssgooi .gt_indent_4 { text-indent: 20px; } #gaqwssgooi .gt_indent_5 { text-indent: 25px; } #gaqwssgooi .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #gaqwssgooi div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } job_qualification contractDuration_min contractDuration_max contractDuration_value workTime_value location_zipcode salary_min salary_max salary_value salary_hourly_mean salary_hourly_min salary_hourly_max entrepriseSecteur_NAF88 experience_min experience_max 305296 328334 328334 328383 332206 68798 319455 352552 319923 319923 319923 352834 285597 316 381324 On remarque que sur 31 variables, 14 ont des valeurs manquantes NA. Pour certaines d’entre elles, il y a beaucoup de valeurs manquantes (job_qualification, contratDuration_min, contratDuration_max, contractDuration_value, workTime_value, salary_min, salary_max, salary_value, salary_hourly_mean, salary_hourly_min, salary_hourly_max, entrepriseSecteur_NAF88, experience_max), et pour d’autres un peu moins (location_zipcode, experience_min). En proportion, on se rend compte que pour les premières variables citées, les valeurs manquantes sont présentes pour plus des 3/4 des observations, cela posera forcément des problèmes pour l’analyse ! Pour en faire une analyse plus poussée, différents packages existent pour détecter et visualiser ces données manquantes. L’un d’entre eux est le package naniar : quelques fonctions permettent d’abord de décrire la base selon ses valeurs manquantes. Cela donne un aperçu global et rapide, mais cela n’est vraiment pas suffisant pour comprendre l’origine et les enjeux (possibles problèmes) de ces valeurs manquantes. library(naniar)# Ci-dessous : nombre de cellules du tableau ou de n_ij d&#39;une matrice # qui correspondent à des valeurs manquantes : n_miss(OffresPE_2020) [1] 4343198 # Pour les avoir en proportion du nombre total de cellules du tableau # et non des seules lignes comme précédemment, # le résultat est déjà en pourcentage, sinon utiliser `prop_miss(RP)`) pct_miss(OffresPE_2020) [1] 33.31641 # Ci-dessous : nombre de cellules du tableau ou de n_ij d&#39;une matrice # qui correspondent à des valeurs renseignées : n_complete(OffresPE_2020) [1] 8693015 #en proportion pct_complete(OffresPE_2020) [1] 66.68359 On peut ensuite visualiser le nombre de valeurs manquantes par variable, avec la fonction gg_miss_var() du même package. On peut également demander dans gg_miss_var() à ce que les valeurs soient en pourcentage, avec l’argument show_pct=TRUE. # 1er type de visualisation des valeurs manquantes OffresPE_2020 %&gt;% gg_miss_var(show_pct=FALSE) Le problème est que pour la variable dont on avait vu qu’elle avait des valeurs vides - contractDuration_period -, ce graphique donne l’impression qu’elle n’a pas de valeurs manquantes. Cela est probablement dû au moment de l’importation des fichiers journaliers de l’ensemble de l’année 2020 et pour les variables caractères, les cellules vides ne sont pas automatiquement remplacées par des “NA” (sauf à mettre l’argument na.strings = c(\"\", \"NA\") dans une fonction read.csv()). Il faut donc pour les variables de type “character” remplacer les celulles vides par des NA, on utilise pour cela la fonction na_if() qui va remplacer pour l’ensemble des variables les valeurs vides \"\" par des Na. OffresPE_2020 &lt;- OffresPE_2020 %&gt;% mutate(across(.cols = where(is.character), .fns = ~ na_if(., &quot;&quot;))) OffresPE_2020 %&gt;% gg_miss_var(show_pct=FALSE) On remarque qu’il y a davantage de variables avec des valeurs manquantes. On peut aussi réaliser des graphiques montrant le nombre de valeurs manquantes pour l’ensemble des variables numériques de la base, en fonction d’une autre variable (y compris de nature ‘factor’), avec l’argument fct= dans gg_miss_fct(). Cela est intéressant pour voir si certaines valeurs manquantes des variables sont liées à des valeurs observées d’autres variables, qu’elles soient quantitatives ou qualitatives (et dans ce cas, est-ce que les valeurs manquantes se retrouvent davantage dans certaines modalités plus que d’autres ?). Par exemple, ici, selon le contrat de travail en rassemblant quelques modalités avant : # on filtre sur les variables numériques car on ne veut pas que la sortie nous affiche # toutes les variables. OffresPE_2020 %&gt;% select(where(is.numeric), contractType) %&gt;% mutate(contractType=as.factor(case_when(contractType==&quot;MIS&quot; ~ &quot;Intérim&quot;, contractType %in% c(&quot;CDS&quot;,&quot;SAI&quot;,&quot;TTI&quot;, &quot;DDI&quot;) ~ &quot;Autres CDD&quot;, contractType %in% c(&quot;CCE&quot;, &quot;REP&quot;, &quot;DIN&quot;) ~ &quot;Autres&quot;, TRUE ~ contractType))) %&gt;% gg_miss_fct(fct = contractType) On voit que les valeurs manquantes sont très nombreuses pour certaines modalités de la variable de contrat comme “Franchise” et “Indépendant”. Cela varie ensuite selon les variables, par exemple pour la modalité “CDD” il n’y a aucune valeur manquante pour les variables de durée des contrats mais davantage pour celles sur les salaires. On voit bien que cela peut être logique : on doit donner la durée du contrat pour un CDD mais pas pour un CDI ni un indépendant… Les valeurs manquantes peuvent donc avoir un sens. Ainsi, les valeurs manquantes ne se distribuent pas de manière uniforme selon la variable de contrat de travail, parfois avec une raison, parfois non. Ensuite, la fonction gg_miss_upset() de ce même package naniar permet de visualiser des dépendances entre, cette fois, les valeurs manquantes des variables : OffresPE_2020 %&gt;% select(where(is.numeric)) %&gt;% gg_miss_upset() Cela nous montre qu’il y a beaucoup d’observations où on a des valeurs manquantes pour 5 variables indiquées, qu’ensuite le cas le plus probable c’est des valeurs manquantes pour 4 de ces 5 variables, etc. Enfin, il est possible d’appliquer la fonction geom_miss_point() à une fonction ggplot, dans ce cas les valeurs manquantes de la ou des variables sont remplacées par des valeurs 10% plus basses que la valeur minimum observée des variables, et cela afin de les visualiser. Il existe bien sûr bien d’autres packages, comme funModeling, Amelia et sa fonction missmap(), ou encore visdat et sa fonction vis_miss(). Enfin, d’autres packages comme VIM ou MICE permettent, non seulement de visualiser ces valeurs manquantes, mais également de leur appliquer des techniques pour les “gérer”, c’est ce que l’on va voir maintenant en résumé. 3.2.2 Gérer les valeurs manquantes Il est bien de connaître le nombre et la proportion de valeurs manquantes dans nos données, comment ces dernières se répartissent entre elles, etc., mais il faut aussi comprendre quel impact elles peuvent avoir sur des analyses statistiques, de régressions ou autres algorithmes. Dans une base de données tirée d’une enquête, les valeurs manquantes peuvent provenir d’une non-réponse de la part de l’enquêté (que ce soit un individu ou une entreprise), cette non-réponse pouvant être “totale” (on a aucune donnée pour cet enquêté alors qu’il fait partie de l’échantillon) ou “partielle” (on a une partie des réponses mais pas à toutes les questions et donc des variables parfois avec des valeurs manquantes) ; ou bien encore elles peuvent être dues à une mauvaise saisie de l’information par l’enquêteur. La pondération, si elle est présente dans une enquête, peut permettre de corriger cette non-réponse totale, voire partielle. Les conséquences des valeurs manquantes dans une base de données dépendent de plusieurs choses : on doit d’abord se demander si l’information perdue aurait été pertinente et/ou aurait apporté un élément particulier/supplémentaire. Ensuite, la perte éventuelle d’information est-elle importante, en nombre/en proportion. Et enfin (et surtout), peut-elle créer un biais lors de l’estimation et de la précision du phénomène que l’on souhaite observer, décrire, analyser, etc. Selon l’importance de ces conséquences, il faut traiter ces valeurs manquantes, c’est-à-dire utiliser une procédure la plus adaptée possible selon le potentiel biais repéré. Traditionnellement dans la littérature, on distingue 3 types de valeurs manquantes : valeur manquante entièrement due au hasard (‘MCAR’ pour Missing completely at random) : il n’y a pas de lien entre la valeur manquante pour une variable donnée et les autres variables, dit autrement la probabilité pour une variable qu’elle ait une valeur manquante est constante dans les données, elle ne diffère pas selon d’autres caractéristiques des individus ; valeur manquante due au hasard (‘MAR’ pour Missing at random) : il y a un lien entre la valeur manquante pour une variable donnée et les valeurs observées d’autres variables, c’est-à-dire que la probabilité pour une variable qu’elle ait une valeur manquante dépend d’autres variables (de leurs valeurs observées), elle ne sera donc pas la même selon les individus, c’est ce qu’on essayait de regarder lorsqu’on a utilisé plus haut la fonction gg_miss_fct(fct=) ; valeur ne manquant pas au hasard (‘NMAR’ pour Non missing at random) : il y a un lien entre la valeur manquante pour une variable et les valeurs manquantes/non observées d’autres variables. Ce sont celles qui risquent d’entraîner des biais importants si on ne les traite pas, c’est ce qu’on essayait de regarder plus haut également avec la fonction gg_miss_upset() cette fois. Comment alors les gérer ? En pratique, il est d’usage lorsque la proportion de valeurs manquantes ne dépasse pas 5% des données de ne rien faire de particulier ou simplement de les supprimer (vous pouvez pour la savoir utiliser les premières fonctions du package naniar présentées précédemment). Sinon, on essaye d’appliquer plusieurs méthodes, simples ou plus complexes. Dans le cas de valeurs manquantes entièrement dues au hasard (MCAR) et/ou d’une faible proportion des valeurs manquantes dans le total de la table de données, on peut décider de supprimer toutes les lignes qui contiennent au moins une valeur manquante, afin d’avoir une table de données complètes, on peut utiliser la fonction na.omit() ou complete.cases() ; attention à ne pas remplacer votre table de données initiale en réalisant cette procédure. On ne va pas s’essayer à le faire ici car on a vu au tout début de cette section que pour certaines variables cela concernait beaucoup d’observations (comme le salaire ou la durée du contrat pour les CDI), la conséquence c’est qu’ici on va supprimer toutes les lignes car une ligne a forcément une valeur manquante dans une des variables. Le code serait celui-ci : OffresPE_2020_sansNA &lt;- na.omit(OffresPE_2020) # OU : # OffresPE_2020_sansNA &lt;- OffresPE_2020[complete.cases(OffresPE_2020), ] Des techniques d’imputation simple peuvent également être utilisées. On peut par exemple remplacer les valeurs manquantes d’une variable quantitative par sa moyenne ou sa médiane, pour cela on peut utiliser la fonction replace_na() du package tidyr, ou impute() du package Hmisc, ou encore na.aggregate() du package zoo On donne ainsi une valeur “artificielle” pour remplacer la valeur manquante. Dans le cas de variables qualitatives, on peut, de même, imputer la modalité dominante (avec la fonction mode() du package Hmisc ; ou avec l’argument mode= du package zoo). Par exemple, voici les codes pour remplacer les valeurs manquantes de la variable ‘salary_value’ par sa médiane (la base n’étant pas propre il vaut mieux utiliser la médiane que la moyenne) : OffresPE_2020 %&gt;% mutate(salary_value_bis = replace_na(salary_value, median(salary_value, na.rm=TRUE))) %&gt;% select(salary_value, salary_value_bis) %&gt;% filter(is.na(salary_value)) %&gt;% head(5) # A tibble: 5 × 2 salary_value salary_value_bis &lt;dbl&gt; &lt;dbl&gt; 1 NA 14.8 2 NA 14.8 3 NA 14.8 4 NA 14.8 5 NA 14.8 # library(Hmisc) # OffresPE_2020$salary_value_bis &lt;- with(OffresPE_2020, impute(salary_value, median)) # # library(zoo) # OffresPE_2020$salary_value_bis &lt;- na.aggregate(OffresPE_2020$ salary_value, # FUN = median) On peut néanmoins réaliser ce type d’imputation simple de manière un petit peu plus subtile. Par exemple, si la moyenne de la variable diffère sensiblement selon une autre variable (catégorielle), dans ce cas, on va plutôt remplacer les valeurs manquantes de la variable selon la moyenne associée à chaque modalité de cette autre variable en ajoutant un group_by() avant la fonction mutate() si on utilise la fonction replace_na() comme dans l’exemple précédent. Si on ne veut pas supprimer ces lignes d’observations et perdre ainsi d’autres informations (celles des variables pour lesquelles la valeur était renseignée pour cette même observation), on peut simplement créer une variable indicatrice de valeur manquante, remplacer les NA par ‘999’ pour des variables quantitatives, ou par une modalité ‘Manquant’ ou ‘Missing’ pour des variables qualitatives. Plusieurs autres méthodes existent également dans le cas de valeurs manquantes dues au hasard (MAR), en voici la liste pour information et sans prétention d’exhaustivité : - analyse pondérée pour des valeurs MAR qui consiste à calculer la probabilité qu’une observation soit complète et ensuite à affecter à chacune des observations complètes, un poids inversement proportionnel à cette probabilité ; - imputation de la dernière observation pour des données temporelles ; - imputation “hot-deck” qui consiste à remplacer la valeur manquante par une valeur observée chez un autre individu ayant les mêmes caractéristiques, ou “cold-deck” (même démarche que précédement, sauf que la valeur imputée vient d’une autre source) ; - imputation par le “plus proche voisin” en utilisant une fonction de distance basée sur plusieurs autres variables/caractéristiques de l’individu ; - imputation par un modèle de régression où l’on va remplacer la valeur manquante par une valeur prédite obtenue par régression sur données complètes de la variable comportant des valeurs manquantes. Il y a aussi des techniques plus complextes d’imputation multiple qui consiste à créer plusieurs valeurs possibles pour une valeur manquante d’une variable, cela peut être adaptée là aussi lorsque les valeurs manquantes sont dues au hasard (MAR). Vous trouverez de multiples ressources sur internet dans des ouvrages libres d’accès, ou vous pouvez aller voir un des chapitres de l’ouvrage principal support du cours (Husson, 2018), avec des exemples d’utilisation. 3.2.3 Détecter et “visualiser” les valeurs aberrantes On va continuer avec cette base de données en s’intéressant maintenant aux valeurs aberrantes. On peut d’abord étudier la distribution de ces variables : la fonction get_summary_stats() du package rstatix permet de donner les statistiques de distribution des variables. On propose d’afficher ici les variables de salaire, d’expérience minimum, de durée des contrat et de temps de travail, pour les seuls CDD et CDI pour que cela soit plus pertinent. library(rstatix) # Au total : 65 449 CDD ; 315 063 CDI # &#39;contractDuration_value&#39; : exprimée en jours # &#39;experience_min&#39; : nombre minimum d’années d’expérience nécessaire pour le # poste (0 s’il est précisé que les personnes sans expérience sont acceptées). # &#39;salary_hourly_mean&#39; : salaire horaire, moyen si min et max proposé, et recalculé # selon la plage temporelle dans laquelle le salaire est exprimé. # &#39;workTime_value&#39; : temps de travail exprimé en heures OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;CDI&quot;)) %&gt;% group_by(contractType) %&gt;% get_summary_stats(salary_value, salary_min, salary_hourly_mean, experience_min, contractDuration_value, workTime_value, show=c(&quot;n&quot;,&quot;mean&quot;, &quot;median&quot;, &quot;min&quot;, &quot;max&quot;,&quot;q1&quot;, &quot;q3&quot;)) %&gt;% gt() #btotjoblle table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #btotjoblle thead, #btotjoblle tbody, #btotjoblle tfoot, #btotjoblle tr, #btotjoblle td, #btotjoblle th { border-style: none; } #btotjoblle p { margin: 0; padding: 0; } #btotjoblle .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #btotjoblle .gt_caption { padding-top: 4px; padding-bottom: 4px; } #btotjoblle .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #btotjoblle .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #btotjoblle .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #btotjoblle .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #btotjoblle .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #btotjoblle .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #btotjoblle .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #btotjoblle .gt_column_spanner_outer:first-child { padding-left: 0; } #btotjoblle .gt_column_spanner_outer:last-child { padding-right: 0; } #btotjoblle .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #btotjoblle .gt_spanner_row { border-bottom-style: hidden; } #btotjoblle .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #btotjoblle .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #btotjoblle .gt_from_md > :first-child { margin-top: 0; } #btotjoblle .gt_from_md > :last-child { margin-bottom: 0; } #btotjoblle .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #btotjoblle .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #btotjoblle .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #btotjoblle .gt_row_group_first td { border-top-width: 2px; } #btotjoblle .gt_row_group_first th { border-top-width: 2px; } #btotjoblle .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #btotjoblle .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #btotjoblle .gt_first_summary_row.thick { border-top-width: 2px; } #btotjoblle .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #btotjoblle .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #btotjoblle .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #btotjoblle .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #btotjoblle .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #btotjoblle .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #btotjoblle .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #btotjoblle .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #btotjoblle .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #btotjoblle .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #btotjoblle .gt_left { text-align: left; } #btotjoblle .gt_center { text-align: center; } #btotjoblle .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #btotjoblle .gt_font_normal { font-weight: normal; } #btotjoblle .gt_font_bold { font-weight: bold; } #btotjoblle .gt_font_italic { font-style: italic; } #btotjoblle .gt_super { font-size: 65%; } #btotjoblle .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #btotjoblle .gt_asterisk { font-size: 100%; vertical-align: 0; } #btotjoblle .gt_indent_1 { text-indent: 5px; } #btotjoblle .gt_indent_2 { text-indent: 10px; } #btotjoblle .gt_indent_3 { text-indent: 15px; } #btotjoblle .gt_indent_4 { text-indent: 20px; } #btotjoblle .gt_indent_5 { text-indent: 25px; } #btotjoblle .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #btotjoblle div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } contractType variable n mean median min max q1 q3 CDD salary_value 19920 14.798 12.43 0.31 1540 10.44 16.48 CDD salary_min 20229 6399.724 1600.00 3.00 288000 20.00 2130.00 CDD salary_hourly_mean 19920 14.412 12.31 0.31 1540 10.35 16.18 CDD experience_min 65416 0.561 0.00 0.00 20 0.00 1.00 CDD contractDuration_value 65283 163.510 130.00 1.00 20656 108.00 217.00 CDD workTime_value 22702 26.393 35.00 1.00 50 14.00 35.00 CDI salary_value 70438 21.059 16.15 0.16 40200 11.87 23.03 CDI salary_min 70582 17120.800 3000.00 3.00 350000 1700.00 32000.00 CDI salary_hourly_mean 70438 21.189 16.48 0.16 40200 12.19 23.34 CDI experience_min 314781 1.268 1.00 0.00 35 0.00 2.00 CDI workTime_value 57335 32.703 35.00 1.00 56 35.00 35.00 Cela nous permet de comprendre qu’il y a probablement encore quelques filtres à effectuer pour avoir une base propre et cohérente, non seulement sur les valeurs maximum - on va y venir - mais aussi sur les valeurs minimum. Peut-on ainsi avoir un salaire brut horaire proposé de 0,16€ (minimum) ou de 40200€ (maximum) dans les offres d’emploi en CDI ? De plus, comme on a vu qu’il y avait beaucoup de valeurs manquantes sur les variables de salaire ou de temps de travail, il faudra indiquer que ces valeurs ne sont pas nécessairement représentatives de l’ensemble des offres de Pôle emploi. On peut également faire quelques graphiques sur ces variables pour mieux visualiser ces valeurs aberrantes, par exemple un histogramme, ou une “boîte à moustache” (seule ou en relation avec une autre variable) : OffresPE_2020 %&gt;% ggplot() + aes(x = salary_hourly_mean) + geom_histogram(bins=50) Warning: Removed 319923 rows containing non-finite outside the scale range (`stat_bin()`). OffresPE_2020 %&gt;% ggplot() + aes(y = salary_hourly_mean) + geom_boxplot() + coord_flip() Warning: Removed 319923 rows containing non-finite outside the scale range (`stat_boxplot()`). On voit bien des points aberrants qui “écrasent” les représentations graphiques, que ce soit avec l’histogramme ou la boîte à moustâche, de telle sorte qu’on ne voit même pas la distribution, en particulier dans le Boxplot la “boîte” en elle-même. Pour rappel, dans un boxplot, par défaut un point est affiché comme aberrant s’il est en dehors de l’intervalle suivant : \\(I=[Q_{1}−1.5×IQR ; Q_{3}+1.5×IQR]\\), IQR étant l’intervalle interquartile donc la différence entre Q1 et Q3. Mais s’agit-il de “vraies” valeurs aberrantes ? Combien d’observations concernent-elles ? La fonction boxplot.stats() permet de récupérer les valeurs des observations indiquées comme aberrantes, comme cela on peut créer ensuite une variable indiquant si oui ou non l’observation a une valeur “aberrante”. Faisons-cela pour la variable de salaire horaire (brut) moyen. # On récupère les valeurs de la partie &#39;out&#39; des sorties de la fonction # &#39;boxplot.stats&#39;, qui correspondent aux valeurs de tout point de données # qui se situe au-delà des extrêmes de la boxplot val_outliers &lt;- boxplot.stats(OffresPE_2020$salary_hourly_mean)$out # On crée une variable dans notre table d&#39;&quot;identification&quot; de ces outliers avec # comme modalité &quot;vraie&quot; si l&#39;observation a une valeur &quot;outliers&quot;, sinon &quot;Faux&quot; # et en créant une modalité pour les valeurs manquantes OffresPE_2020 &lt;- OffresPE_2020 %&gt;% mutate(salary_outliers = case_when(is.na(salary_hourly_mean) ~ &quot;NA&quot;, salary_hourly_mean %in% c(val_outliers) ~ &quot;Vrai&quot;, TRUE ~ &quot;Faux&quot;)) # Puis on regarde la répartition avec la fonction `tabyl()` du package `janitor()` library(janitor) OffresPE_2020 %&gt;% tabyl(salary_outliers) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% adorn_pct_formatting() %&gt;% gt() #hwcoqgwyyy table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #hwcoqgwyyy thead, #hwcoqgwyyy tbody, #hwcoqgwyyy tfoot, #hwcoqgwyyy tr, #hwcoqgwyyy td, #hwcoqgwyyy th { border-style: none; } #hwcoqgwyyy p { margin: 0; padding: 0; } #hwcoqgwyyy .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #hwcoqgwyyy .gt_caption { padding-top: 4px; padding-bottom: 4px; } #hwcoqgwyyy .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #hwcoqgwyyy .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #hwcoqgwyyy .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #hwcoqgwyyy .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #hwcoqgwyyy .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #hwcoqgwyyy .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #hwcoqgwyyy .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #hwcoqgwyyy .gt_column_spanner_outer:first-child { padding-left: 0; } #hwcoqgwyyy .gt_column_spanner_outer:last-child { padding-right: 0; } #hwcoqgwyyy .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #hwcoqgwyyy .gt_spanner_row { border-bottom-style: hidden; } #hwcoqgwyyy .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #hwcoqgwyyy .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #hwcoqgwyyy .gt_from_md > :first-child { margin-top: 0; } #hwcoqgwyyy .gt_from_md > :last-child { margin-bottom: 0; } #hwcoqgwyyy .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #hwcoqgwyyy .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #hwcoqgwyyy .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #hwcoqgwyyy .gt_row_group_first td { border-top-width: 2px; } #hwcoqgwyyy .gt_row_group_first th { border-top-width: 2px; } #hwcoqgwyyy .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #hwcoqgwyyy .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #hwcoqgwyyy .gt_first_summary_row.thick { border-top-width: 2px; } #hwcoqgwyyy .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #hwcoqgwyyy .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #hwcoqgwyyy .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #hwcoqgwyyy .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #hwcoqgwyyy .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #hwcoqgwyyy .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #hwcoqgwyyy .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #hwcoqgwyyy .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #hwcoqgwyyy .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #hwcoqgwyyy .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #hwcoqgwyyy .gt_left { text-align: left; } #hwcoqgwyyy .gt_center { text-align: center; } #hwcoqgwyyy .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #hwcoqgwyyy .gt_font_normal { font-weight: normal; } #hwcoqgwyyy .gt_font_bold { font-weight: bold; } #hwcoqgwyyy .gt_font_italic { font-style: italic; } #hwcoqgwyyy .gt_super { font-size: 65%; } #hwcoqgwyyy .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #hwcoqgwyyy .gt_asterisk { font-size: 100%; vertical-align: 0; } #hwcoqgwyyy .gt_indent_1 { text-indent: 5px; } #hwcoqgwyyy .gt_indent_2 { text-indent: 10px; } #hwcoqgwyyy .gt_indent_3 { text-indent: 15px; } #hwcoqgwyyy .gt_indent_4 { text-indent: 20px; } #hwcoqgwyyy .gt_indent_5 { text-indent: 25px; } #hwcoqgwyyy .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #hwcoqgwyyy div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } salary_outliers n percent Faux 97233 23.1% NA 319923 76.1% Vrai 3367 0.8% Total 420523 100.0% OffresPE_2020 %&gt;% filter(salary_outliers !=&quot;NA&quot;) %&gt;% tabyl(salary_outliers) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% adorn_pct_formatting() %&gt;% gt() #nftsgipkgw table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #nftsgipkgw thead, #nftsgipkgw tbody, #nftsgipkgw tfoot, #nftsgipkgw tr, #nftsgipkgw td, #nftsgipkgw th { border-style: none; } #nftsgipkgw p { margin: 0; padding: 0; } #nftsgipkgw .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #nftsgipkgw .gt_caption { padding-top: 4px; padding-bottom: 4px; } #nftsgipkgw .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #nftsgipkgw .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #nftsgipkgw .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #nftsgipkgw .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nftsgipkgw .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #nftsgipkgw .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #nftsgipkgw .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #nftsgipkgw .gt_column_spanner_outer:first-child { padding-left: 0; } #nftsgipkgw .gt_column_spanner_outer:last-child { padding-right: 0; } #nftsgipkgw .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #nftsgipkgw .gt_spanner_row { border-bottom-style: hidden; } #nftsgipkgw .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #nftsgipkgw .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #nftsgipkgw .gt_from_md > :first-child { margin-top: 0; } #nftsgipkgw .gt_from_md > :last-child { margin-bottom: 0; } #nftsgipkgw .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #nftsgipkgw .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #nftsgipkgw .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #nftsgipkgw .gt_row_group_first td { border-top-width: 2px; } #nftsgipkgw .gt_row_group_first th { border-top-width: 2px; } #nftsgipkgw .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #nftsgipkgw .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #nftsgipkgw .gt_first_summary_row.thick { border-top-width: 2px; } #nftsgipkgw .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nftsgipkgw .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #nftsgipkgw .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #nftsgipkgw .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #nftsgipkgw .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #nftsgipkgw .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #nftsgipkgw .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #nftsgipkgw .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #nftsgipkgw .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #nftsgipkgw .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #nftsgipkgw .gt_left { text-align: left; } #nftsgipkgw .gt_center { text-align: center; } #nftsgipkgw .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #nftsgipkgw .gt_font_normal { font-weight: normal; } #nftsgipkgw .gt_font_bold { font-weight: bold; } #nftsgipkgw .gt_font_italic { font-style: italic; } #nftsgipkgw .gt_super { font-size: 65%; } #nftsgipkgw .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #nftsgipkgw .gt_asterisk { font-size: 100%; vertical-align: 0; } #nftsgipkgw .gt_indent_1 { text-indent: 5px; } #nftsgipkgw .gt_indent_2 { text-indent: 10px; } #nftsgipkgw .gt_indent_3 { text-indent: 15px; } #nftsgipkgw .gt_indent_4 { text-indent: 20px; } #nftsgipkgw .gt_indent_5 { text-indent: 25px; } #nftsgipkgw .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #nftsgipkgw div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } salary_outliers n percent Faux 97233 96.7% Vrai 3367 3.3% Total 100600 100.0% On y lit que pour cette variable lorsqu’elle est renseignée, il y aurait près de 3,3% de valeurs aberrantes telles qu’indiquées par le boxplot, ce qui correspondant à 3 367 observations, c’est beaucoup ! On peut regarder plus précisément à quelles observations elles correspondent, en sélectionnant avec la variable créée et en triant par ordre croissant ou décroissant. OffresPE_2020 %&gt;% filter(salary_outliers==&#39;Vrai&#39;) %&gt;% select(salary_hourly_mean, contractType) %&gt;% arrange(salary_hourly_mean) %&gt;% head(5) %&gt;% gt() #xwgfsluout table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #xwgfsluout thead, #xwgfsluout tbody, #xwgfsluout tfoot, #xwgfsluout tr, #xwgfsluout td, #xwgfsluout th { border-style: none; } #xwgfsluout p { margin: 0; padding: 0; } #xwgfsluout .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #xwgfsluout .gt_caption { padding-top: 4px; padding-bottom: 4px; } #xwgfsluout .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #xwgfsluout .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #xwgfsluout .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #xwgfsluout .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #xwgfsluout .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #xwgfsluout .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #xwgfsluout .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #xwgfsluout .gt_column_spanner_outer:first-child { padding-left: 0; } #xwgfsluout .gt_column_spanner_outer:last-child { padding-right: 0; } #xwgfsluout .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #xwgfsluout .gt_spanner_row { border-bottom-style: hidden; } #xwgfsluout .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #xwgfsluout .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #xwgfsluout .gt_from_md > :first-child { margin-top: 0; } #xwgfsluout .gt_from_md > :last-child { margin-bottom: 0; } #xwgfsluout .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #xwgfsluout .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #xwgfsluout .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #xwgfsluout .gt_row_group_first td { border-top-width: 2px; } #xwgfsluout .gt_row_group_first th { border-top-width: 2px; } #xwgfsluout .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #xwgfsluout .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #xwgfsluout .gt_first_summary_row.thick { border-top-width: 2px; } #xwgfsluout .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #xwgfsluout .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #xwgfsluout .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #xwgfsluout .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #xwgfsluout .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #xwgfsluout .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #xwgfsluout .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #xwgfsluout .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #xwgfsluout .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #xwgfsluout .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #xwgfsluout .gt_left { text-align: left; } #xwgfsluout .gt_center { text-align: center; } #xwgfsluout .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #xwgfsluout .gt_font_normal { font-weight: normal; } #xwgfsluout .gt_font_bold { font-weight: bold; } #xwgfsluout .gt_font_italic { font-style: italic; } #xwgfsluout .gt_super { font-size: 65%; } #xwgfsluout .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #xwgfsluout .gt_asterisk { font-size: 100%; vertical-align: 0; } #xwgfsluout .gt_indent_1 { text-indent: 5px; } #xwgfsluout .gt_indent_2 { text-indent: 10px; } #xwgfsluout .gt_indent_3 { text-indent: 15px; } #xwgfsluout .gt_indent_4 { text-indent: 20px; } #xwgfsluout .gt_indent_5 { text-indent: 25px; } #xwgfsluout .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #xwgfsluout div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } salary_hourly_mean contractType 35.60 CDI 35.60 CDD 35.71 CDI 35.72 CDI 35.79 CDI OffresPE_2020 %&gt;% filter(salary_outliers==&#39;Vrai&#39;) %&gt;% select(salary_hourly_mean, contractType) %&gt;% arrange(desc(salary_hourly_mean)) %&gt;% head(5) %&gt;% gt() #jxaafkrllc table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #jxaafkrllc thead, #jxaafkrllc tbody, #jxaafkrllc tfoot, #jxaafkrllc tr, #jxaafkrllc td, #jxaafkrllc th { border-style: none; } #jxaafkrllc p { margin: 0; padding: 0; } #jxaafkrllc .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #jxaafkrllc .gt_caption { padding-top: 4px; padding-bottom: 4px; } #jxaafkrllc .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #jxaafkrllc .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #jxaafkrllc .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #jxaafkrllc .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #jxaafkrllc .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #jxaafkrllc .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #jxaafkrllc .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #jxaafkrllc .gt_column_spanner_outer:first-child { padding-left: 0; } #jxaafkrllc .gt_column_spanner_outer:last-child { padding-right: 0; } #jxaafkrllc .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #jxaafkrllc .gt_spanner_row { border-bottom-style: hidden; } #jxaafkrllc .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #jxaafkrllc .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #jxaafkrllc .gt_from_md > :first-child { margin-top: 0; } #jxaafkrllc .gt_from_md > :last-child { margin-bottom: 0; } #jxaafkrllc .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #jxaafkrllc .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #jxaafkrllc .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #jxaafkrllc .gt_row_group_first td { border-top-width: 2px; } #jxaafkrllc .gt_row_group_first th { border-top-width: 2px; } #jxaafkrllc .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #jxaafkrllc .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #jxaafkrllc .gt_first_summary_row.thick { border-top-width: 2px; } #jxaafkrllc .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #jxaafkrllc .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #jxaafkrllc .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #jxaafkrllc .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #jxaafkrllc .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #jxaafkrllc .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #jxaafkrllc .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #jxaafkrllc .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #jxaafkrllc .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #jxaafkrllc .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #jxaafkrllc .gt_left { text-align: left; } #jxaafkrllc .gt_center { text-align: center; } #jxaafkrllc .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #jxaafkrllc .gt_font_normal { font-weight: normal; } #jxaafkrllc .gt_font_bold { font-weight: bold; } #jxaafkrllc .gt_font_italic { font-style: italic; } #jxaafkrllc .gt_super { font-size: 65%; } #jxaafkrllc .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #jxaafkrllc .gt_asterisk { font-size: 100%; vertical-align: 0; } #jxaafkrllc .gt_indent_1 { text-indent: 5px; } #jxaafkrllc .gt_indent_2 { text-indent: 10px; } #jxaafkrllc .gt_indent_3 { text-indent: 15px; } #jxaafkrllc .gt_indent_4 { text-indent: 20px; } #jxaafkrllc .gt_indent_5 { text-indent: 25px; } #jxaafkrllc .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #jxaafkrllc div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } salary_hourly_mean contractType 40200 CDI 35000 CDI 26000 MIS 22000 MIS 20015 CDI On voit donc qu’il y a des valeurs considérées comme aberrantes en haut de la distribution, à partir d’un salaire brut horaire de 35,60€ (tri par odre croissant), les plus hauts salaires brut horaires étant de 40200€ ou 35000 (tri par ordre décroissant). Attention, un salaire brut horaire de 35,60€ correspond pour un temps plein (35H/semaine) à un salaire brut mensuel d’environ 4984€, est-ce vraiment une valeur aberrante ?! Pour être plus précis, on peut calculer les valeurs seuils bas et haut puisqu’on connaît la formule. Le seuil bas sera : -2.79 et le seuil haut : 35.53. Comme déjà dit, le seuil haut est vraisemblables en réalité, en revanche avoir un salaire brut horaire négatif ou proche de 0 n’est pas possible ! Il est donc important de comprendre ces valeurs aberrantes, cela peut parfois correspondre à des observations intéressantes à conserver, il ne s’agit pas juste de les identifier pour les exclure directement ensuite des analyses. Il existe d’autres méthodes (méthode basée sur les percentiles ; méthode de Hampel), et d’autres tests : par exemple, le package outliers vous permet de tester si une valeur (max ou min) est bien une valeur aberrante avec la fonction grubbs.test() (attention bis : à utiliser avec grande précaution et beaucoup de parcimonie), ou avec le package EnvStats et la fonction rosnerTest() pour détecter plusieurs “outliers” à la fois. Pour gérer ces variables aberrantes, on peut les supprimer bien sûr si l’on est sûr que la valeur de la variable n’est pas “normale”, par exemple comme ici quand la variable de salaire est inférieure ou égale à 0 (ou même inférieure au SMIC), oui dans ce cas ce sont des mauvais outliers (et d’ailleurs parfois ils peuvent même ne pas être identifiés comme tel statistiquement) et on peut les supprimer ; de même pour des variables de résultats économiques, on va souvent élaguer la distribution en retirant les 1% (par exemple) du bas et du haut de la distribution pour supprimer des potentiels outliers. On peut tenter cette méthode ici en filtrant les données avant de calculer la distribution de la variable. Sinon, on les isole en créant une variable dichotomique “0/1” ou “Faux/Vrai” ; ou on crée une variable qualitative avec plusieurs catégories (cf. sous-section suivante). Dans les graphiques, en particulier les boîtes à moustache, on peut les supprimer visuellement avec l’option outlier.shape = NA et mettre ensuite une échelle plus réduite (avec ylim=c( , )) pour que le graphique soit plus lisible, mais il faut alors bien préciser dans la légende que certaines valeurs ne sont pas visibles sur le graphique car retirées ; attention à ne pas les supprimer de la base sur laquelle est réalisée la boxplot car sinon cela va modifier les indicateurs (en particulier de moyenne mais pas seulement). Dans un histogramme, on peut de même jouer sur l’échelle. OffresPE_2020 %&gt;% ggplot() + aes(y = salary_hourly_mean) + geom_boxplot(outlier.shape = NA) + coord_flip(ylim = c(quantile(OffresPE_2020[!is.na(OffresPE_2020$salary_hourly_mean), ]$salary_hourly_mean, 0.01), quantile(OffresPE_2020[!is.na(OffresPE_2020$salary_hourly_mean), ]$salary_hourly_mean, 0.99))) + labs(title = &quot;Distribution des salaires horaires brut en euros des offres d&#39;emploi reçus sur \\nle site de Pôle emploi en 2020&quot;, y=&quot;&quot;, x=&quot;&quot;, caption=&quot;Rq : les valeurs en-dessous du 1% de la distribution et celles au-dessus du 99% de la distribution ne sont pas \\naffichées sur le graphique ; de même pour les valeurs considérées comme aberrantes selon la statistique du boxplot.&quot;) + theme(plot.caption = element_text(hjust=0)) Warning: Removed 319923 rows containing non-finite outside the scale range (`stat_boxplot()`). OffresPE_2020 %&gt;% ggplot() + aes(salary_hourly_mean) + geom_histogram(bins=50000) + coord_cartesian(xlim=c(quantile(OffresPE_2020[!is.na(OffresPE_2020$salary_hourly_mean), ]$salary_hourly_mean, 0.01), quantile(OffresPE_2020[!is.na(OffresPE_2020$salary_hourly_mean), ]$salary_hourly_mean, 0.99))) + labs(title = &quot;Distribution des salaires horaires brut en euros des offres d&#39;emploi reçus sur \\nle site de Pôle emploi en 2020&quot;, y=&quot;&quot;, x=&quot;Salaire horaire brut&quot;, caption=&quot;Rq : les valeurs en-dessous du 1% de la distribution et celles au-dessus du 99% de la distribution ne sont pas \\naffichées sur le graphique.&quot;) + theme(plot.caption = element_text(hjust=0)) Warning: Removed 319923 rows containing non-finite outside the scale range (`stat_bin()`). C’est mieux mais on voit qu’il y a probablement encore un problème pour les valeurs faibles du salaire qu’il faudrait “nettoyer”. On peut refaire le graphique en élaguant davantage en bas de la distribution et en haut à partir de valeurs de salaire connus par exemple : # On peut filtrer directement avec des valeurs de salaire horaire brut &quot;connu&quot; # (comme la valeur du SMIC ou la valeur du 9ème décile, cf. site de l&#39;Insee) OffresPE_2020 %&gt;% filter(salary_hourly_mean&gt;=10 &amp; salary_hourly_mean&lt;90) %&gt;% ggplot() + aes(y = salary_hourly_mean) + geom_boxplot() + coord_flip() + labs(title = &quot;Distribution des salaires horaires brut en euros des offres d&#39;emploi reçus sur \\nle site de Pôle emploi en 2020&quot;, y=&quot;&quot;, x=&quot;&quot;, caption=&quot;Rq : les valeurs en-dessous du SMIC horaire brut et celles au-dessus du 9ème décile de la distribution des salaires \\nprivés en France ne sont pas affichées sur le graphique.&quot;) + theme(plot.caption = element_text(hjust=0)) OffresPE_2020 %&gt;% filter(salary_hourly_mean&gt;=10 &amp; salary_hourly_mean&lt;90) %&gt;% ggplot() + aes(salary_hourly_mean) + geom_histogram(bins=100) + labs(title = &quot;Distribution des salaires horaires brut en euros des offres d&#39;emploi reçus sur \\nle site de Pôle emploi en 2020&quot;, y=&quot;&quot;, x=&quot;Salaire horaire brut&quot;, caption=&quot;Rq : les valeurs en-dessous du SMIC horaire brut et celles au-dessus du 9ème décile de la distribution des salaires \\nprivés en France ne sont pas affichées sur le graphique.&quot;) + theme(plot.caption = element_text(hjust=0)) 3.2.4 Découper une variable quantitative en classes On peut enfin découper en classes une variable quantitative et en faire donc une variable qualitative. On utilise pour cela la fonction cut() du langage de base de R. On peut par exemple découper la variable selon les principaux indicateurs de la distribution. # OffresPE_2020 %&gt;% get_summary_stats(salary_hourly_mean) OffresPE_2020$salary_cat &lt;- cut(OffresPE_2020$salary_hourly_mean, breaks = c(0, 10, quantile(OffresPE_2020[!is.na(OffresPE_2020$salary_hourly_mean),]$salary_hourly_mean,0.25), mean(OffresPE_2020[!is.na(OffresPE_2020$salary_hourly_mean),]$salary_hourly_mean), 90, max(OffresPE_2020[!is.na(OffresPE_2020$salary_hourly_mean),]$salary_hourly_mean)), labels=c(&quot;Entre 0 et moins que le SMIC (10€)&quot;, &quot;Entre le SMIC et le Q1(11,58€)&quot;, &quot;Entre le Q1 et la moyenne (20,07€)&quot;, &quot;Entre la moyenne et le D9 observée en France&quot;, &quot;Entre le D9 et le maximum (40200€)&quot;)) OffresPE_2020 %&gt;% tabyl(salary_cat) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% adorn_pct_formatting() %&gt;% gt() #exoghmjshh table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #exoghmjshh thead, #exoghmjshh tbody, #exoghmjshh tfoot, #exoghmjshh tr, #exoghmjshh td, #exoghmjshh th { border-style: none; } #exoghmjshh p { margin: 0; padding: 0; } #exoghmjshh .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #exoghmjshh .gt_caption { padding-top: 4px; padding-bottom: 4px; } #exoghmjshh .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #exoghmjshh .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #exoghmjshh .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #exoghmjshh .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #exoghmjshh .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #exoghmjshh .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #exoghmjshh .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #exoghmjshh .gt_column_spanner_outer:first-child { padding-left: 0; } #exoghmjshh .gt_column_spanner_outer:last-child { padding-right: 0; } #exoghmjshh .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #exoghmjshh .gt_spanner_row { border-bottom-style: hidden; } #exoghmjshh .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #exoghmjshh .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #exoghmjshh .gt_from_md > :first-child { margin-top: 0; } #exoghmjshh .gt_from_md > :last-child { margin-bottom: 0; } #exoghmjshh .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #exoghmjshh .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #exoghmjshh .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #exoghmjshh .gt_row_group_first td { border-top-width: 2px; } #exoghmjshh .gt_row_group_first th { border-top-width: 2px; } #exoghmjshh .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #exoghmjshh .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #exoghmjshh .gt_first_summary_row.thick { border-top-width: 2px; } #exoghmjshh .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #exoghmjshh .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #exoghmjshh .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #exoghmjshh .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #exoghmjshh .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #exoghmjshh .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #exoghmjshh .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #exoghmjshh .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #exoghmjshh .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #exoghmjshh .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #exoghmjshh .gt_left { text-align: left; } #exoghmjshh .gt_center { text-align: center; } #exoghmjshh .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #exoghmjshh .gt_font_normal { font-weight: normal; } #exoghmjshh .gt_font_bold { font-weight: bold; } #exoghmjshh .gt_font_italic { font-style: italic; } #exoghmjshh .gt_super { font-size: 65%; } #exoghmjshh .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #exoghmjshh .gt_asterisk { font-size: 100%; vertical-align: 0; } #exoghmjshh .gt_indent_1 { text-indent: 5px; } #exoghmjshh .gt_indent_2 { text-indent: 10px; } #exoghmjshh .gt_indent_3 { text-indent: 15px; } #exoghmjshh .gt_indent_4 { text-indent: 20px; } #exoghmjshh .gt_indent_5 { text-indent: 25px; } #exoghmjshh .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #exoghmjshh div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } salary_cat n percent valid_percent Entre 0 et moins que le SMIC (10€) 3489 0.8% 3.5% Entre le SMIC et le Q1(11,58€) 21668 5.2% 21.5% Entre le Q1 et la moyenne (20,07€) 47138 11.2% 46.9% Entre la moyenne et le D9 observée en France 27930 6.6% 27.8% Entre le D9 et le maximum (40200€) 375 0.1% 0.4% NA 319923 76.1% - Total 420523 100.0% 100.0% On a une classe majoritaire (du Q1 à la moyenne), mais cela nous permet de distinguer 2 classes pour lesquelles le montant du salaire horaire brut est soit plutôt faible mais au-dessus du SMIC, soit plutôt élevé mais en-dessous de la valeur D9 observée en France. "],["04-Récapitulatif.html", "Section4 Récapitulatig séance 1 - Data Wrangling 4.1 Ce qu’on a appris 4.2 Enregistrement des tables", " Section4 Récapitulatig séance 1 - Data Wrangling 4.1 Ce qu’on a appris Cette séance sur la préparation et nettoyage d’une base de données - phase appelée aussi Data Wrangling - nous a permis d’apprendre à : charger des bases de données, y compris dans le cas d’un fichier lourd avec la fonction fread() du package data.table ; repérer les informations intéressantes contenues dans cette base, notamment en allant voir le fichier “annexe”, celui des métadonneés (ou dictionnaire des codes) ; mais ce type de fichier n’est pas toujours disponible, si vous avez des données d’une entreprise, peut-être que l’information décrivant cette base est plus informelle, ou même si vous “aspirez” des données via le web vous n’aurez alors pas du tout d’information décrivant la base… : manipuler la base de données : en identifiant d’abord le format des données, en sélectionnant un champ différent (moins de lignes/d’observations), et/ou des variables spécifiques (moins de colonnes/d’informations), avec les fonctions filter(), select(), subset(), pivot_wider(), pivot_longer(), unique(), arrange(), etc.; manipuler des variables : en identifiant le format des variables, en les mettant dans le bon format, en (re)travaillant les modalités d’une variable qualitative (avec notamment les fonctions mutate(), case_when(), as.factor(), ou encore celles du package factors), en détectant/visualisant/gérant les valeurs manquantes d’une variable quantitative avec entre autres le package naniar, en détectant/visualiant/gérant les valeurs aberrantes d’une variable quantitative à partir en particulier des statistiques de la “boîte à moustaches” (fonction geom_boxplot() à utiliser avec ggplot(), fonction boxplot.stats()), et enfin, en transformant une variable quantitative en variable qualitative (avec la fonction cut()). L’usage pour cette phase du langage dplyr ou plus généralement du tidyverse est particulièrement conseillée, cela permet d’“enchaîner” des fonctions en une seule instruction. 4.2 Enregistrement des tables Et voilà, on a bien “trituré” ces deux bases de données, maintenant on peut les enregistrer dans notre projet pour pouvoir les réutiliser lors de la prochaine séance. # On enregistre les tables de données pour les utiliser ultérieurement saveRDS(object = RP_final, file = &quot;data/RP_final.Rdata&quot;) saveRDS(object = meta, file = &quot;data/meta.Rdata&quot;) saveRDS(object = OffresPE_2020, file = &quot;data/OffresPE_2020.Rdata&quot;) "],["05-Questions-fouille-donnees.html", "Section5 Quelles questions intéressantes pour une “fouille de données” sur la base des RP ? 5.1 Caractéristiques de la population résidant à Paris 5.2 Caractéristiques de la population active résidant à Paris 5.3 Caractéristiques des logements parisiens", " Section5 Quelles questions intéressantes pour une “fouille de données” sur la base des RP ? Quelles sont les questions intéressantes que l’on peut se poser ? Qu’est-ce qu’on va pouvoir mettre en évidence à partir de ces données ? D’abord, on peut caractériser la population de Paris et sa petite couronne selon des variables socio-démographiques (sexe, âge, diplôme, statut conjugal, nombre d’enfants, …) et d’emploi (statut d’activité, PCS, condition d’emploi - contrat, temps de travail -, secteur d’activité, …). Ensuite, on peut décrire les logements de Paris et sa petite couronne, selon le type (appartement, maison, HLM, …), la superficie, le nombre de pièces, le nombre de personnes y habitant, le statut d’occupation (propriétaire, locataire, …), l’ancienneté d’occupation. Enifn, on peut décrire plus précisément les pièces du logement en termes de confort (baignoire / douche, salle climatisée, moyen de chauffage), ainsi que les parties communes de l’immeuble (ascenseur, place de stationnement). Enfin, on pourrait étudier les caractéristiques des occupants de ces logements, et en premier lieu ici ce que l’Insee appelle la “personne de référence du ménage”. Par ailleurs, toutes ces analyses peuvent être réalisées en comparant les différentes communes de Paris et sa petite couronne, ou à un niveau géographique plus fin par quartiers, arrondissements ou encore IRIS. Pour manipuler cette base et répondre à quelques-unes de ces questions, nous allons nous concentrer sur la commune de Paris, et allons chercher à reproduire des statistiques publiées sur le site de l’Insee. Nous produirons principalement, lors de cette séance, des tableaux de statistiques, l’analyse graphique fera en effet l’objet de la séance suivante car elle nécessite la présentation détaillée de la “grammaire” Ggplot. Avant cela, si les tables de données (“RP_final” et “meta”) ne sont plus dans votre environnement local, il faut de nouveau les importer à partir de l’enregistrement précédemment effectué dans le dossier ‘data’ de votre projet. Pour cela, il faut utiliser la fonction readRDS(), comme ci-dessous : 5.1 Caractéristiques de la population résidant à Paris Sur le site de l’Insee, vous pouvez trouver les statistiques générales sur les individus à Paris en 2019 ici et là. Comme déjà vu lors de la 1ère séance, l’application de la pondération pour avoir des statistiques représentatives de la population peut être utilisée à l’intérieur de la fonction count() avec l’argument wt=. Cela nous donnera le nombre d’individus concernés par la caractéristique étudiée (par défaut, la variable créée s’appelle “n”, on peut la renommer dans une étape ultérieure avec la fonction rename()). Souvent, on souhaite aussi avoir les pourcentages, on peut alors créer une variable rapportant le nombre de chaque catégorie sur le nombre total d’individus, avec la fonction prop.table() utilisée dans la fonction mutate(). Le package janitor peut permettre enfin d’ajouter une ligne totale (ou une colonne totale selon ce qu’on souhaite faire) avec la fonction adorn_totals(), argument “row” pour avoir le total en ligne ou “col” pour l’avoir en colonne. Des fonctions supplémentaires liées au package gt() peuvent ensuite être utilisées pour mettre en forme le tableau : fmt_number(), tab_header() ou encore tab_source_note(). A partir de ces indications, afficher le tableau suivant à partir d’un code utilisant le langage tidyverse et en une seule procédure (sans créer de table dans votre environnement) : #jyethwzmak table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #jyethwzmak thead, #jyethwzmak tbody, #jyethwzmak tfoot, #jyethwzmak tr, #jyethwzmak td, #jyethwzmak th { border-style: none; } #jyethwzmak p { margin: 0; padding: 0; } #jyethwzmak .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #jyethwzmak .gt_caption { padding-top: 4px; padding-bottom: 4px; } #jyethwzmak .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #jyethwzmak .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #jyethwzmak .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #jyethwzmak .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #jyethwzmak .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #jyethwzmak .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #jyethwzmak .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #jyethwzmak .gt_column_spanner_outer:first-child { padding-left: 0; } #jyethwzmak .gt_column_spanner_outer:last-child { padding-right: 0; } #jyethwzmak .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #jyethwzmak .gt_spanner_row { border-bottom-style: hidden; } #jyethwzmak .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #jyethwzmak .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #jyethwzmak .gt_from_md > :first-child { margin-top: 0; } #jyethwzmak .gt_from_md > :last-child { margin-bottom: 0; } #jyethwzmak .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #jyethwzmak .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #jyethwzmak .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #jyethwzmak .gt_row_group_first td { border-top-width: 2px; } #jyethwzmak .gt_row_group_first th { border-top-width: 2px; } #jyethwzmak .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #jyethwzmak .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #jyethwzmak .gt_first_summary_row.thick { border-top-width: 2px; } #jyethwzmak .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #jyethwzmak .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #jyethwzmak .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #jyethwzmak .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #jyethwzmak .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #jyethwzmak .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #jyethwzmak .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #jyethwzmak .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #jyethwzmak .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #jyethwzmak .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #jyethwzmak .gt_left { text-align: left; } #jyethwzmak .gt_center { text-align: center; } #jyethwzmak .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #jyethwzmak .gt_font_normal { font-weight: normal; } #jyethwzmak .gt_font_bold { font-weight: bold; } #jyethwzmak .gt_font_italic { font-style: italic; } #jyethwzmak .gt_super { font-size: 65%; } #jyethwzmak .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #jyethwzmak .gt_asterisk { font-size: 100%; vertical-align: 0; } #jyethwzmak .gt_indent_1 { text-indent: 5px; } #jyethwzmak .gt_indent_2 { text-indent: 10px; } #jyethwzmak .gt_indent_3 { text-indent: 15px; } #jyethwzmak .gt_indent_4 { text-indent: 20px; } #jyethwzmak .gt_indent_5 { text-indent: 25px; } #jyethwzmak .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #jyethwzmak div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } Population par sexe en 2019 Sexe Effectif Pourcentage Femmes 1 146 436 52.9 Hommes 1 019 195 47.1 Total 2 165 631 100.0 Source : Insee, RP 2019 ; Champ : Paris. library(tidyverse) library(janitor) library(gt) RP_final %&gt;% filter(DEPT == &quot;75&quot;) %&gt;% mutate(SEXE=case_when(SEXE==&quot;1&quot; ~ &quot;Hommes&quot;, SEXE==&quot;2&quot; ~ &quot;Femmes&quot;)) %&gt;% count(SEXE, wt=IPONDI) %&gt;% mutate(Pourcentage=round(prop.table(n)*100, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, &#39;Sexe&#39;=SEXE) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) %&gt;% tab_header(title = &quot;Population par sexe en 2019&quot;) Il y a plus de femmes habitant Paris en 2019, environ 53%. Cherchons maintenant la répartition de la population parisienne par type d’activité : quelle est la proportion d’actifs ayant un emploi par rapport à la part des chômeurs ou encore des retraités ? Attention au champ sur lequel porte ces statistiques (lire le titre du tableau pour cela…). #pkohbsrgzb table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #pkohbsrgzb thead, #pkohbsrgzb tbody, #pkohbsrgzb tfoot, #pkohbsrgzb tr, #pkohbsrgzb td, #pkohbsrgzb th { border-style: none; } #pkohbsrgzb p { margin: 0; padding: 0; } #pkohbsrgzb .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #pkohbsrgzb .gt_caption { padding-top: 4px; padding-bottom: 4px; } #pkohbsrgzb .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #pkohbsrgzb .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #pkohbsrgzb .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pkohbsrgzb .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pkohbsrgzb .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pkohbsrgzb .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #pkohbsrgzb .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #pkohbsrgzb .gt_column_spanner_outer:first-child { padding-left: 0; } #pkohbsrgzb .gt_column_spanner_outer:last-child { padding-right: 0; } #pkohbsrgzb .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #pkohbsrgzb .gt_spanner_row { border-bottom-style: hidden; } #pkohbsrgzb .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #pkohbsrgzb .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #pkohbsrgzb .gt_from_md > :first-child { margin-top: 0; } #pkohbsrgzb .gt_from_md > :last-child { margin-bottom: 0; } #pkohbsrgzb .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #pkohbsrgzb .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #pkohbsrgzb .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #pkohbsrgzb .gt_row_group_first td { border-top-width: 2px; } #pkohbsrgzb .gt_row_group_first th { border-top-width: 2px; } #pkohbsrgzb .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pkohbsrgzb .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #pkohbsrgzb .gt_first_summary_row.thick { border-top-width: 2px; } #pkohbsrgzb .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pkohbsrgzb .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pkohbsrgzb .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #pkohbsrgzb .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #pkohbsrgzb .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #pkohbsrgzb .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pkohbsrgzb .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pkohbsrgzb .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #pkohbsrgzb .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pkohbsrgzb .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #pkohbsrgzb .gt_left { text-align: left; } #pkohbsrgzb .gt_center { text-align: center; } #pkohbsrgzb .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #pkohbsrgzb .gt_font_normal { font-weight: normal; } #pkohbsrgzb .gt_font_bold { font-weight: bold; } #pkohbsrgzb .gt_font_italic { font-style: italic; } #pkohbsrgzb .gt_super { font-size: 65%; } #pkohbsrgzb .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #pkohbsrgzb .gt_asterisk { font-size: 100%; vertical-align: 0; } #pkohbsrgzb .gt_indent_1 { text-indent: 5px; } #pkohbsrgzb .gt_indent_2 { text-indent: 10px; } #pkohbsrgzb .gt_indent_3 { text-indent: 15px; } #pkohbsrgzb .gt_indent_4 { text-indent: 20px; } #pkohbsrgzb .gt_indent_5 { text-indent: 25px; } #pkohbsrgzb .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #pkohbsrgzb div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } Population des 15-64 ans par type d'activité en 2019 Type d'activité Effectif Pourcentage Actifs ayant un emploi 1 042 588 69.3 Chômeurs 135 014 9.0 Élèves, étudiants et stagiaires non rémunérés 192 205 12.8 Retraités ou préretraités 38 512 2.6 Autres inactifs 95 944 6.4 Total 1 504 263 100.1 Source : Insee, RP 2019 ; Champ : Paris. RP_final %&gt;% filter(DEPT == &quot;75&quot; &amp; !AGEREVQ %in% c(&quot;0&quot;, &quot;5&quot;, &quot;10&quot;, &quot;65&quot;, &quot;70&quot;, &quot;75&quot;, &quot;80&quot;, &quot;85&quot;, &quot;90&quot;, &quot;95&quot;, &quot;100&quot;, &quot;105&quot;, &quot;110&quot;, &quot;115&quot;, &quot;120&quot;)) %&gt;% mutate(TACT=case_when(TACT == &quot;11&quot; ~ &quot;Actifs ayant un emploi&quot;, TACT == &quot;12&quot; ~ &quot;Chômeurs&quot;, TACT == &quot;22&quot; ~ &quot;Élèves, étudiants et stagiaires non rémunérés&quot;, TACT == &quot;21&quot; ~ &quot;Retraités ou préretraités&quot;, TRUE ~ &quot;Autres inactifs&quot;), TACT=fct_relevel(TACT, c(&quot;Actifs ayant un emploi&quot;, &quot;Chômeurs&quot;, &quot;Élèves, étudiants et stagiaires non rémunérés&quot;, &quot;Retraités ou préretraités&quot;, &quot;Autres inactifs&quot;))) %&gt;% count(TACT, wt=IPONDI) %&gt;% mutate(Pourcentage=round(prop.table(n)*100,1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, &quot;Type d&#39;activité&quot;=TACT) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) %&gt;% tab_header(title = &quot;Population des 15-64 ans par type d&#39;activité en 2019&quot;) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) En 2019, la population parisienne comportait plus de 78% d’actifs dont 69% ayant un emploi et 9% au chômage, le taux de chômage à Paris était donc de 11,5% (135014/(1042588+135014))*100). La part des étudiants ou autres élèves était plus élevée que celle des retraités (ou préretaités) : 12,8% contre 2,6%. 5.2 Caractéristiques de la population active résidant à Paris Maintenant, affichons les deux dernières colonnes (‘2019’ et ‘dont actifs ayant un emploi’) de ce tableau tiré du site de l’Insee, en mettant la ligne “Ensemble” plutôt en fin de tableau (ces 2 usages sont possibles, question de préférence…). Attention encore une fois au champ de ce tableau… Pour cela, on va : récupérer les libellés des modalités de la variable CS1 à partir du fichier ‘meta’, en créant 2 vecteurs correspondant aux modalités pour le 1er et aux libellés pour le 2nd, puis en créant une variable ‘CS1_moda’ à partir de ces vecteurs ; créer une 1ère table qu’on appellera ‘col2’ qui comportera la 1ère colonne avec les intitulés des PCS et la colonne ‘2019’, attention, il y a une modalité qui ne nous intéresse pas car non affiché dans le tableau de l’Insee, il faudra supprimer cette ligne (vous pouvez utiliser pour cela la fonction slice()) ; créer une 2ème table qu’on appellera ‘col3’ qui comportera la 1ère colonne avec les intitulés des PCS et la colonne ‘dont actifs ayant un emploi’, attention le champ n’est donc pas tout à fait le même ; joindre ces deux tables et appliquer les fonctions gt() et suivantes pour la mise en forme du tableau final. # On va récupérer les libellés des modalités de la variable CS1 à partir du # fichier meta : levels_CS1 &lt;- meta[meta$COD_VAR==&quot;CS1&quot;, ]$COD_MOD labels_CS1 &lt;- meta[meta$COD_VAR==&quot;CS1&quot;, ]$LIB_MOD RP_final &lt;- RP_final %&gt;% mutate(CS1_moda=factor(CS1, levels = levels_CS1, labels = labels_CS1)) col2 &lt;- RP_final %&gt;% filter(DEPT == &quot;75&quot; &amp; !AGEREVQ %in% c(&quot;0&quot;, &quot;5&quot;, &quot;10&quot;, &quot;65&quot;, &quot;70&quot;, &quot;75&quot;, &quot;80&quot;, &quot;85&quot;, &quot;90&quot;, &quot;95&quot;, &quot;100&quot;, &quot;105&quot;, &quot;110&quot;, &quot;115&quot;, &quot;120&quot;) &amp; TACT %in% c(&quot;11&quot;, &quot;12&quot;)) %&gt;% count(CS1_moda, wt=IPONDI) %&gt;% mutate(n=round(n)) %&gt;% rename(&#39;2019&#39;=n, &#39;PCS&#39;=CS1_moda) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% slice(-7) col3 &lt;- RP_final %&gt;% filter(DEPT == &quot;75&quot; &amp; !AGEREVQ %in% c(&quot;0&quot;, &quot;5&quot;, &quot;10&quot;, &quot;65&quot;, &quot;70&quot;, &quot;75&quot;, &quot;80&quot;, &quot;85&quot;, &quot;90&quot;, &quot;95&quot;, &quot;100&quot;, &quot;105&quot;, &quot;110&quot;, &quot;115&quot;, &quot;120&quot;) &amp; TACT %in% c(&quot;11&quot;)) %&gt;% count(CS1_moda, wt=IPONDI) %&gt;% mutate(n=round(n)) %&gt;% rename(&#39;dont actifs ayant un emploi&#39;=n, &#39;PCS&#39;=CS1_moda) %&gt;% adorn_totals(&quot;row&quot;) col2 %&gt;% left_join(col3) %&gt;% gt() %&gt;% fmt_number(columns = c(2,3), sep_mark = &quot; &quot;, decimals = 0) %&gt;% tab_header(title = &quot;Population active de 15-64 ans selon la catégorie socioprofessionnelle en 2019&quot;) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) # On supprime les tableaux intermédiaires rm(col2, col3) A Paris, la population active comprend en 2019 plus de 500 000 personnes appartenant à la catégorie “cadres et professions intellectuelles supérieures”, des 2 colonnes on peut en déduire qu’il y a environ 31 000 personnes relevant de cette PCS qui sont au chômage. Les cadres sont suivis des professions intermédiaires (plus de 260 000 actifs) et des employés (quasi 220 000). Il y a très peu d’agriculteurs exploitants, ce qui semble assez logique sur le territoire de Paris ! 5.3 Caractéristiques des logements parisiens Enfin, pour donner un exemple sur l’étude des caractéristiques des logements parisiens, essayons de même de reproduire le tableau de l’Insee ci-dessous. Souvenez-vous que cette base a plusieurs unités statistiques/niveaux : individus, logements/ménages, etc. Il faut donc faire attention : au champ du tableau donc les filtres à utiliser ici ; à avoir d’abord les moyennes sur ces deux types de logements, donc uiliser à la suite les fonctions group_by() et summarise() ; à ajouter ensuite une ligne sur l’ensemble des résidences principales avec la fonction bind_rows() ; à changer les dénominations des colonnes et des modalités, avec les fonctions du package gt() comme cols_label() ou text_case_match(). RP_final %&gt;% filter(DEPT == &quot;75&quot; &amp; LPRM==&quot;1&quot; &amp; CATL==&quot;1&quot; &amp; TYPL %in% c(&quot;1&quot;, &quot;2&quot;)) %&gt;% group_by(TYPL) %&gt;% summarise(Moy_pieces = weighted.mean(as.numeric(as.character(NBPI)), IPONDI, na.rm=T)) %&gt;% bind_rows(summarise(TYPL = &quot;Ensemble des résidences principales&quot;, RP_final[RP_final$DEPT == &quot;75&quot; &amp; RP_final$LPRM==&quot;1&quot; &amp; RP_final$CATL == &quot;1&quot; &amp; RP_final$TYPL %in% c(&quot;1&quot;, &quot;2&quot;), ], Moy_pieces = weighted.mean(as.numeric(as.character(NBPI)), IPONDI, na.rm=T))) %&gt;% gt() %&gt;% fmt_number(columns = 2, dec_mark = &quot;,&quot;, decimals = 1) %&gt;% cols_label(TYPL=&quot;Type de logement&quot;, Moy_pieces=&quot;2019&quot;) %&gt;% text_case_match(&quot;1&quot; ~ &quot;Maison&quot;, &quot;2&quot; ~ (&quot;Appartement&quot;)) %&gt;% tab_header(title = &quot;Nombre moyen de pièces des résidences principales&quot;) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) Ainsi, si l’on veut créer des tableaux de répartition à une seule variable, on peut utiliser ces procédures qui se structurent toujours de la même façon. Au lieu de faire un copié-collé du code et de changer le nom des variables, autrement dit pour systématiser nos procédures, une astuce est de créer ses propres fonctions. C’est ce que nous allons étudier maintenant. "],["06-Fonctions.html", "Section6 Systématiser nos procédures : construire une fonction 6.1 Principes généraux d’une fonction 6.2 Exemples de fonctions", " Section6 Systématiser nos procédures : construire une fonction Pour ré-utiliser un code de façon plus automatique, créer des fonctions est très utile (et on peut même les stocker dans un fichier .r pour les réutiliser plus tard pour une autre étude). 6.1 Principes généraux d’une fonction L’idée est qu’à partir d’un bloc d’instructions ou de lignes de codes, on l’intègre dans une fonction qui portera un nom et qui pourra être appliquée sur les paramètres que l’on veut (table/objet différent, variables différentes) et qui nous retournera une valeur en sortie (qu’il faut préciser donc). Par exemple : # Exemple fonction avec 3 arguments nom_fonction &lt;- function(data, var1, var2) { expression... # Ce que la fonction fait return() # Optionnel, mais la plupart du temps utilisé (!), # pour sortir le résultat de la fonction } # L&#39;appel de la fonction devra ainsi préciser la table de données sur laquelle # l&#39;appliquer et les autres arguments : nom_fonction(data = nom_de_ma_table , var1 = nom_de_ma_variable1, var2 = nom_de_ma_variable2) # De plus, on pourra créer un nouvel objet (ici &quot;tab_var&quot;) pour stocker la table # qui est en valeur de sortie de la fonction : tab_var &lt;- nom_fonction(data = nom_de_ma_table , var1 = nom_de_ma_variable1, var2 = nom_de_ma_variable2) Les arguments doivent donc être précisés en entrée de notre fonction, si on ne les précise pas cela nous retournera une erreur… à moins que l’on ait spécifié des valeurs par défaut (ce qui peut être utile si on utilise souvent les mêmes paramètres, par exemple la même base de données) ; il peut y avoir autant d’arguments que l’on souhaite. Si l’on utilise le langage tidyverse, il faut connaître quelques petits “trucs” pour écrire une fonction. Le schéma suivant réalisé par Julien Barnier du CNRS nous sera très utile. Pour une fonction utilisant le langage tidyverse Source : Julien Barnier, https://twitter.com/lapply/status/1493908215796535296?s=20&amp;t=p4aYIEV4GsGS3TGftPa0Nw. Vous trouverez également des informations utiles ici ou là. 6.2 Exemples de fonctions On peut d’abord créer une fonction reprenant le code de la section précédente pour la construction de tableau. On l’appelle tableau, et on lui donne comme arguments “data”, “filtre_dept”, “var_quali”, “pond” et “nom_var_quali”. Dans le langage tidyverse, au sein d’une fonction, il faut appeler une variable avec des doubles-accolades {{ }}. Si l’on utilise une fonction summarise(), une autre subtilité à connaître est que cette syntaxe summarise({{ nom_var }} = mean({{ var }}, na.rm=TRUE)) ne sera pas reconnue, car il faut indiquer non pas un = mais un := pour que la fonction puisse être lue lorsque le nom donné à la variable est de type caractère ou “string”. Enfin, il ne faut pas oublier de retourner un objet en sortie avec return(). Essayez donc de créer une fonction tableau(), reprenant le premier code de la section précédente et remise ci-dessous pour information : RP_final %&gt;% filter(DEPT == &quot;75&quot;) %&gt;% mutate(SEXE_moda=case_when(SEXE==&quot;1&quot; ~ &quot;Hommes&quot;, SEXE==&quot;2&quot; ~ &quot;Femmes&quot;)) %&gt;% #ne pas mettre cette ligne dans la fonction count(SEXE_moda, wt=IPONDI) %&gt;% mutate(Pourcentage=round(prop.table(n)*100, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, &#39;Sexe&#39;=SEXE_moda) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) %&gt;% tab_header(title = &quot;Population par sexe en 2019&quot;) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) tableau &lt;- function(data, filtre_dept, var_quali, pond=IPONDI, nom_var_quali){ tab &lt;- data %&gt;% filter(DEPT == filtre_dept) %&gt;% count({{ var_quali }}, wt={{ pond }}) %&gt;% mutate(Pourcentage=round(prop.table(n)*100, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, {{nom_var_quali}}:={{ var_quali }}) return(tab) } On peut vérifier qu’on obtient bien la même chose : RP_final %&gt;% mutate(SEXE_moda=case_when(SEXE==&quot;1&quot; ~ &quot;Hommes&quot;, SEXE==&quot;2&quot; ~ &quot;Femmes&quot;)) %&gt;% tableau(filtre_dept=&quot;75&quot;, var_quali=SEXE_moda, nom_var_quali=&quot;Sexe&quot;) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) %&gt;% tab_header(title = &quot;Population par sexe en 2019&quot;) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) #wkeogwbkho table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #wkeogwbkho thead, #wkeogwbkho tbody, #wkeogwbkho tfoot, #wkeogwbkho tr, #wkeogwbkho td, #wkeogwbkho th { border-style: none; } #wkeogwbkho p { margin: 0; padding: 0; } #wkeogwbkho .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #wkeogwbkho .gt_caption { padding-top: 4px; padding-bottom: 4px; } #wkeogwbkho .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #wkeogwbkho .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #wkeogwbkho .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #wkeogwbkho .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #wkeogwbkho .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #wkeogwbkho .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #wkeogwbkho .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #wkeogwbkho .gt_column_spanner_outer:first-child { padding-left: 0; } #wkeogwbkho .gt_column_spanner_outer:last-child { padding-right: 0; } #wkeogwbkho .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #wkeogwbkho .gt_spanner_row { border-bottom-style: hidden; } #wkeogwbkho .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #wkeogwbkho .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #wkeogwbkho .gt_from_md > :first-child { margin-top: 0; } #wkeogwbkho .gt_from_md > :last-child { margin-bottom: 0; } #wkeogwbkho .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #wkeogwbkho .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #wkeogwbkho .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #wkeogwbkho .gt_row_group_first td { border-top-width: 2px; } #wkeogwbkho .gt_row_group_first th { border-top-width: 2px; } #wkeogwbkho .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #wkeogwbkho .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #wkeogwbkho .gt_first_summary_row.thick { border-top-width: 2px; } #wkeogwbkho .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #wkeogwbkho .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #wkeogwbkho .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #wkeogwbkho .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #wkeogwbkho .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #wkeogwbkho .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #wkeogwbkho .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #wkeogwbkho .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #wkeogwbkho .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #wkeogwbkho .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #wkeogwbkho .gt_left { text-align: left; } #wkeogwbkho .gt_center { text-align: center; } #wkeogwbkho .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #wkeogwbkho .gt_font_normal { font-weight: normal; } #wkeogwbkho .gt_font_bold { font-weight: bold; } #wkeogwbkho .gt_font_italic { font-style: italic; } #wkeogwbkho .gt_super { font-size: 65%; } #wkeogwbkho .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #wkeogwbkho .gt_asterisk { font-size: 100%; vertical-align: 0; } #wkeogwbkho .gt_indent_1 { text-indent: 5px; } #wkeogwbkho .gt_indent_2 { text-indent: 10px; } #wkeogwbkho .gt_indent_3 { text-indent: 15px; } #wkeogwbkho .gt_indent_4 { text-indent: 20px; } #wkeogwbkho .gt_indent_5 { text-indent: 25px; } #wkeogwbkho .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #wkeogwbkho div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } Population par sexe en 2019 Sexe Effectif Pourcentage Femmes 1 146 436 52.9 Hommes 1 019 195 47.1 Total 2 165 631 100.0 Source : Insee, RP 2019 ; Champ : Paris. On a gagné 5 lignes de codes ! Si on a plusieurs filtres à mettre, comme on a pu le voir avec le 2nd tableau, on peut utiliser l’argument “…” (lire “dot”) : cet argument est très pratique si l’on ne sait pas combien il y aura de variable(s) dans la fonction à laquelle elle s’applique, c’est-à-dire autant 0 variable, 1 variable ou plus d’une variable ; mais elle peut aussi être “dangereuse” si on ne se souvient plus qu’on l’a créée et/ou si on ne fait pas attention à bien remplir les autres arguments avec les noms correspondants. Si on réécrit la fonction tableau et qu’on l’applique au 2nd tableau créé précédemment, cela donnerait ceci : tableau &lt;- function(data, ..., var_quali, pond=IPONDI, nom_var_quali){ tab &lt;- data %&gt;% filter(...) %&gt;% count({{ var_quali }}, wt={{ pond }}) %&gt;% mutate(Pourcentage=round(prop.table(n)*100, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, {{nom_var_quali}}:={{ var_quali }}) return(tab) } RP_final %&gt;% mutate(TACT_moda1=case_when(TACT == &quot;11&quot; ~ &quot;Actifs ayant un emploi&quot;, TACT == &quot;12&quot; ~ &quot;Chômeurs&quot;, TACT == &quot;22&quot; ~ &quot;Élèves, étudiants et stagiaires non rémunérés&quot;, TACT == &quot;21&quot; ~ &quot;Retraités ou préretraités&quot;, TRUE ~ &quot;Autres inactifs&quot;), TACT_moda1=fct_relevel(TACT_moda1, c(&quot;Actifs ayant un emploi&quot;, &quot;Chômeurs&quot;, &quot;Élèves, étudiants et stagiaires non rémunérés&quot;, &quot;Retraités ou préretraités&quot;, &quot;Autres inactifs&quot;))) %&gt;% tableau(DEPT == &quot;75&quot; &amp; !AGEREVQ %in% c(&quot;0&quot;, &quot;5&quot;, &quot;10&quot;, &quot;65&quot;, &quot;70&quot;, &quot;75&quot;, &quot;80&quot;, &quot;85&quot;, &quot;90&quot;, &quot;95&quot;, &quot;100&quot;, &quot;105&quot;, &quot;110&quot;, &quot;115&quot;, &quot;120&quot;), var_quali=TACT_moda1, nom_var_quali=&quot;Type d&#39;activité&quot;) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) %&gt;% tab_header(title = &quot;Population de 15-64 ans par type d&#39;activité en 2019&quot;) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) #zglwwqjrko table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #zglwwqjrko thead, #zglwwqjrko tbody, #zglwwqjrko tfoot, #zglwwqjrko tr, #zglwwqjrko td, #zglwwqjrko th { border-style: none; } #zglwwqjrko p { margin: 0; padding: 0; } #zglwwqjrko .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #zglwwqjrko .gt_caption { padding-top: 4px; padding-bottom: 4px; } #zglwwqjrko .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #zglwwqjrko .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #zglwwqjrko .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #zglwwqjrko .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #zglwwqjrko .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #zglwwqjrko .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #zglwwqjrko .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #zglwwqjrko .gt_column_spanner_outer:first-child { padding-left: 0; } #zglwwqjrko .gt_column_spanner_outer:last-child { padding-right: 0; } #zglwwqjrko .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #zglwwqjrko .gt_spanner_row { border-bottom-style: hidden; } #zglwwqjrko .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #zglwwqjrko .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #zglwwqjrko .gt_from_md > :first-child { margin-top: 0; } #zglwwqjrko .gt_from_md > :last-child { margin-bottom: 0; } #zglwwqjrko .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #zglwwqjrko .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #zglwwqjrko .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #zglwwqjrko .gt_row_group_first td { border-top-width: 2px; } #zglwwqjrko .gt_row_group_first th { border-top-width: 2px; } #zglwwqjrko .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #zglwwqjrko .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #zglwwqjrko .gt_first_summary_row.thick { border-top-width: 2px; } #zglwwqjrko .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #zglwwqjrko .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #zglwwqjrko .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #zglwwqjrko .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #zglwwqjrko .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #zglwwqjrko .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #zglwwqjrko .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #zglwwqjrko .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #zglwwqjrko .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #zglwwqjrko .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #zglwwqjrko .gt_left { text-align: left; } #zglwwqjrko .gt_center { text-align: center; } #zglwwqjrko .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #zglwwqjrko .gt_font_normal { font-weight: normal; } #zglwwqjrko .gt_font_bold { font-weight: bold; } #zglwwqjrko .gt_font_italic { font-style: italic; } #zglwwqjrko .gt_super { font-size: 65%; } #zglwwqjrko .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #zglwwqjrko .gt_asterisk { font-size: 100%; vertical-align: 0; } #zglwwqjrko .gt_indent_1 { text-indent: 5px; } #zglwwqjrko .gt_indent_2 { text-indent: 10px; } #zglwwqjrko .gt_indent_3 { text-indent: 15px; } #zglwwqjrko .gt_indent_4 { text-indent: 20px; } #zglwwqjrko .gt_indent_5 { text-indent: 25px; } #zglwwqjrko .katex-display { display: inline-flex !important; margin-bottom: 0.75em !important; } #zglwwqjrko div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { height: 0px !important; } Population de 15-64 ans par type d'activité en 2019 Type d'activité Effectif Pourcentage Actifs ayant un emploi 1 042 588 69.3 Chômeurs 135 014 9.0 Élèves, étudiants et stagiaires non rémunérés 192 205 12.8 Retraités ou préretraités 38 512 2.6 Autres inactifs 95 944 6.4 Total 1 504 263 100.1 Source : Insee, RP 2019 ; Champ : Paris. Une autre façon de faire serait de créer un vecteur qui contiendrait ces différents filtres mais qu’il faudrait combiner dans une chaîne de caractères, ce qui est possible avec la fonction paste0(), et l’insérer ensuite dans la ligne de code dplir en utilisant eval(parse(text=)) pour convertir cette chaîne de caractéres en une expression (parse(text=)) pour que R puisse l’évaluer/le calculer avec la fonction eval(). tableau_bis &lt;- function(data, vars_filtre, var_quali, pond=IPONDI, nom_var_quali){ text_filtre &lt;- paste0(&quot;(&quot;, vars_filtre, &quot;)&quot;, collapse = &quot; &amp; &quot;) tab1 &lt;- data %&gt;% filter(eval(parse(text = text_filtre))) %&gt;% count({{ var_quali }}, wt={{ pond }}) %&gt;% mutate(Pourcentage=round(prop.table(n)*100, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, {{nom_var_quali}}:={{ var_quali }}) return(tab1) } # Attention, comme les filtres sont contenues dans des &quot; &quot;, il faut à l&#39;intérieur des # filtres utiliser les &#39; &#39; plutôt que les &quot; &quot; mes_filtres &lt;- c(&quot;DEPT == &#39;75&#39;&quot;, &quot;!AGEREVQ %in% c(&#39;0&#39;, &#39;5&#39;, &#39;10&#39;, &#39;65&#39;, &#39;70&#39;, &#39;75&#39;, &#39;80&#39;, &#39;85&#39;, &#39;90&#39;, &#39;95&#39;, &#39;100&#39;, &#39;105&#39;, &#39;110&#39;, &#39;115&#39;, &#39;120&#39;)&quot;) RP_final %&gt;% mutate(TACT_moda1=case_when(TACT == &quot;11&quot; ~ &quot;Actifs ayant un emploi&quot;, TACT == &quot;12&quot; ~ &quot;Chômeurs&quot;, TACT == &quot;22&quot; ~ &quot;Élèves, étudiants et stagiaires non rémunérés&quot;, TACT == &quot;21&quot; ~ &quot;Retraités ou préretraités&quot;, TRUE ~ &quot;Autres inactifs&quot;), TACT_moda1=fct_relevel(TACT_moda1, c(&quot;Actifs ayant un emploi&quot;, &quot;Chômeurs&quot;, &quot;Élèves, étudiants et stagiaires non rémunérés&quot;, &quot;Retraités ou préretraités&quot;, &quot;Autres inactifs&quot;))) %&gt;% tableau_bis(mes_filtres, var_quali=TACT_moda1, nom_var_quali=&quot;Type d&#39;activité&quot;) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) %&gt;% tab_header(title = &quot;Population de 15-64 ans par type d&#39;activité en 2019&quot;) %&gt;% tab_source_note(source_note = &quot;Source : Insee, RP 2019 ; Champ : Paris.&quot;) On peut également créer une fonction pour permettre de récupérer plus rapidement les libellés des variables à partir du fichier de métadonnées : # Pour la fonction mutate, on est de nouveau obligé d&#39;utiliser l&#39;expression # &#39;eval(parse(text={{ cod_var }}))&#39; sinon R ne comprend pas que la variable # utilisée est une expression de type caractère libelles_var &lt;- function(data, cod_var, new_var){ levels_var &lt;- meta[meta$COD_VAR=={{ cod_var }}, ]$COD_MOD labels_var &lt;- meta[meta$COD_VAR=={{ cod_var }}, ]$LIB_MOD data %&gt;% mutate({{ new_var }} := factor(eval(parse(text={{ cod_var }})), levels = levels_var, labels = labels_var)) } # Autre possibilité, utiliser la fonction `sym()` (qui crée un symbole à partir # d&#39;une chaîne de caractères) avec les &quot;!!&quot; (opérateur bang-bang qui permet de # forcer l&#39;évaluation d&#39;une partie d&#39;une expression avant le reste) : # libelles_var &lt;- function(data, cod_var, new_var){ # # levels_var &lt;- meta[meta$COD_VAR=={{ cod_var }}, ]$COD_MOD # labels_var &lt;- meta[meta$COD_VAR=={{ cod_var }}, ]$LIB_MOD # data %&gt;% mutate({{ new_var }} := factor(!!sym({{ cod_var }}), # levels = levels_var, # labels = labels_var)) # # } Enfin, essayez d’écrire une seconde fonction somme() permettant de systématiser le code utilisée en fin de 1ère séance et qui donnait un tableau de contingence du nombre de personnes caractériées par son statut par commune (cela nous servira pour plus tard…) ; le voici pour rappel : RP_final %&gt;% group_by(COM) %&gt;% count(TACT_moda, wt=IPONDI) %&gt;% mutate(n=round(n)) %&gt;% pivot_wider(names_from = TACT_moda, values_from = n) somme &lt;- function(data, var_gpe, nom_var){ som &lt;- data %&gt;% group_by({{var_gpe}}) %&gt;% count({{nom_var}}, wt=IPONDI) %&gt;% mutate(n=round(n)) %&gt;% pivot_wider(names_from = {{nom_var}}, values_from = n) return(som) } Vérifions : somme(data=RP_final, COM, TACT_moda) # A tibble: 137 × 5 COM `Actifs en emploi` Chômeurs Retraités `Autres inactifs` &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 75101 8366 941 2630 3979 2 75102 13118 1378 2148 4964 3 75103 19239 2085 4589 8123 4 75104 15227 1863 4508 7513 5 75105 27378 2611 10607 17618 6 75106 18073 1842 8180 12176 7 75107 23394 2165 9573 13735 8 75108 18254 1565 5297 10534 9 75109 34155 3482 7264 15125 10 75110 46454 6343 10645 23078 # ℹ 127 more rows La création de fonctions est donc très utile pour avoir un code plus efficace ; il faut toutefois réfléchir à son usage avant de la créer pour savoir à quel point il faut systématiser les procédures utilisées, certains éléments devant être laissés probablement en-dehors de la fonction, comme dans l’exemple précédent le fait d’arrondir les chiffres. Il faut par ailleurs toujours vérfier, sur un ou deux exemples, que la fonction fonctionne bien, c’est-à-dire donne les mêmes résultats que le code initial. Pour pouvoir les réutiliser ultérieurement, on peut les réécrire dans un nouveau script qu’on enregistre dans un dossier de notre projet qu’on intitule “fonctions” ; il suffira ensuite d’appeler ce programme avec la fonction source() : source(&quot;fonctions/fonctions.R&quot;) "],["07-Ggplot-theorique.html", "Section7 Data Visualization et Ggplot2 : aspects théoriques 7.1 Présentation générale de Ggplot2 7.2 Les grands principes de data visualization", " Section7 Data Visualization et Ggplot2 : aspects théoriques 7.1 Présentation générale de Ggplot2 Le package ggplot2 (inclus dans le package tidyverse) est l’un des atouts de R et permet de réaliser de beaux graphiques ; vous en trouverez ici la présentation officielle. L’inconvénient, surtout pour quelqu’un qui serait habitué à construire des graphiques sous excel, est qu’il faut (presque) tout paramétrer, ce qui peut finalement donner un code très long. L’architecture globale de ggplot2 est souvent représentée par le schéma ci-dessous : Pour le lire, il faut partir du bas du schéma : par “Data”, nous devons d’abord préciser la base ou le tableau de données utilisé(e) qui contient la ou les variables qui seront représentées ; par “aesthetics”, nous allons ensuite indiquer les variables qui seront projetées sur le graphe ; par “geometries”, nous indiquons le type de graphique utilisé ou la forme géométrique ; par “facets”, nous pouvons éventuellement (facultatif donc) diviser ou découper le graphique en plusieurs graphes (ou “panneaux”) dépendant d’une autre variable par exemple ; par “statistics”, nous pouvons là aussi éventuellement ajouter des statistiques ; par “coordinates”, nous pouvons là aussi éventuellement changer le sens du graphique ; enfin, par “theme”, nous pouvons utiliser éventuellement l’un des thèmes graphiques diponibles et/ou ajouter un certain nombre d’options sur ce qui “entoure” le graphique, c’est-à-dire les positions et/ou couleurs et/ou taille, etc., des axes, titre, légende, etc. 7.1.1 Les “aesthetics” ou arguments esthétiques Il s’agit principalement d’indiquer quelle variable sera utilisée en abcisse (x=), et laquelle sera éventuellement utilisée en ordonnée (y=). Mais on peut aussi ajouter des variables supplémentaires qui seront différenciées par : couleur, avec color= (pour des points, lignes ou symboles) ou fill= (pour le contenu des bâtons ou symboles) ; taille avec size= ; symboles avec shape= ; type de lignes avec linetype= ; degré de transparence avec alpha= (mais non conseillé pour les variables discrètes). La nuance à bien comprendre est qu’utiliser ces options à l’intérieur de la fonction aes() revient à ajouter une 3ème variable (une légende apparaîtra alors automatiquement), alors que si l’on veut simplement changer l’aspect des points, lignes, barres, etc., d’une variable déjà projetée, il faut appeler (souvent) ces mêmes options après la fonction aes() à l’intérieur de la fonction geom_***() par exemple. Dans ce cas-là, on peut changer la couleur des points avec color= , la taille des points ou lignes avec size=, l’épaisseur des barres avec width=, etc. C’est la différence entre le “mapping” et les “settings”. Chacune de ces options ont des modalités différentes, il peut être bien d’avoir des mémos rangés dans un dossier créé pour cela pour éviter de les chercher à chaque fois. Par exemple, pour les couleurs, vous trouverez un mémo pdf ici, ou un bon récapitulatif là. On peut également utiliser la fonction colours() dans R pour voir la liste complète des couleurs standard. Pour la liste des symboles (“shape”) et le numéro correspondant que l’on appelera avec l’argument shape=, ci-dessous un récapitulatif : Et voici pour la liste des types de lignes, avec linetype= : 7.1.2 Les géométries Une fois les variables appelées, il faut définir le type de graphique. Il y a beaucoup de choix possibles inclus dans ggplot2, le tout est de bien comprendre quel type de graphique convient le mieux à ou aux variables utilisées et à ce que l’on veut montrer (cf. section suivante sur les grands principes de la data visualization). Voici un tableau récapitulant les principales “geometries”. Tableau : Les principales fonctions “geometries” de Ggplot Fonction Type de graphique Type de variable(s) geom_histogram() Histogramme 1 variable continue geom_density() Courbe de densité 1 variable continue geom_area() Graphique en aires empilées 1 variable continue geom_col() Graphique en bâtons 1 variable discrète geom_point() Nuage de points 2 variables continues geom_jitter() Nuage de points dispersés 2 variables continues geom_boxplot() Boîte à moustache 1 variable continue, sans ou avec 1 variable discrète geom_violin() Graphes en violon 1 variable continue, sans ou avec 1 variable discrète geom_bar() Graphique en bâtons 1 variable continue, sans ou avec 1 variable discrète geom_line() Lignes Fonction continue selon une variable de date geom_area() Graphique en aires empilées Fonction continue selon une variable de date Certaines d’entre elles ont des options à préciser, presque de façon obligatoire comme nous l’avons déjà vu avec geom_histogram() et l’option bins=, si elle n’est pas précisée, elle sera “forcée” par R mais un message d’avertissement en rouge apparaîtra. Il en existe bien sûr plein d’autres, il faut dans ce cas rechercher sur internet ou aller voir sur la “cheatsheet” de ggplot2 disponible sur internet. Il est possible de faire suivre plusieurs fonctions geom_***() : par exemple un geom_line() après un geom_point(), un geom_text() après un geom_bar(), etc. Dans ce cas, des variables supplémentaires peuvent être ajoutées (ou remplacer les précédentes) avec une nouvelle fonction aes à l’intérieur de ce geom_***() ; un exemple assez courant est la construction d’un graphique en bâtons avec l’ajout des valeurs de la variable à l’intérieur des bâtons (ou juste au-dessus), on fera alors appel à deux fonction geom_***() comme ceci : data %&gt;% ggplot() + aes(x=, y=) + geom_bar() + geom_text(aes(label=)). De même, il est possible de spécifier des données (data) différentes pour chaque geom_***() . 7.1.3 Les facettes Il y a deux types de facettes (en réalité trois, avec celle par défaut qui s’intitule facet_null() et produit un seul graphe) : facet_wrap() : produit une suite de graphiques et a un argument principal facets=vars() et éventuellement ncol= et nrow= ; facet_grid() : produit une grille ou matrice de graphiques définies par une ou deux variables qui forment les lignes et les colonnes, définies avec les deux arguments principaux cols= et row=, ou en indiquant un ~ entre les deux variables. À savoir, il y a des options pour contrôler les échelles avec l’argument scales=. Les facettes sont ainsi une autre façon, par rapport aux “aesthetics”, de représenter deux variables par rapport à une troisième variable. 7.1.4 Les statistiques On peut vouloir ajouter sur un graphique des statistiques particulières ou supplémentaires, comme la moyenne ou médiane d’une variable quantitative, ou encore représenter la régression linéaire dans le cas d’une variable fonction d’une autre, etc. Par exemple, si l’on projette des boîtes à moustache, la moyenne n’étant pas affichée on peut la rajouter avec la fonction stat_summary() et l’option fun = mean. Si l’on souhaite ajouter une régression linéaire sur un graphique de nuage de points, il faut utiliser la fonction geom_smooth() et l’option method=lm. Certaines statistiques peuvent aussi être calculées ou transformées directement dans certaines fonctions : c’est par exemple le cas avec la fonction geom_histogramm() où l’on peut produire un histogramme de la densité en spécifiant y=..density.. dans l’aes() ou en la superposant à l’aide d’une courbe à l’histogramme initial en ajoutant alors ensuite un geom_density() ; ou encore avec la fonction geom_bar() avec les arguments stat = \"summary_bin\", fun = mean (par défaut, stat = \"count\", dans ce cas la hauteur des barres représente le comptage des cas dans chaque catégorie). 7.1.5 Les coordonnées Les systèmes de coordonnées linéaires permettent de changer le sens du graphique ou de “zoomer” sur le graphique : coord_cartesian() : c’est le système de coordonnées par défaut (repère “cartésien”), en changeant les arguments xlim= ou ylim=, on procède à un zoom sur l’axe des abscisses et/ou celui des ordonnées ; cela permet de ne pas supprimer des données comme le ferait les fonctions scale_x_continuous() ou scale_y_continuous mais juste de ne pas les afficher sur le graphe ; coord_flip() : permet d’inverser les axes ; coord_fixed() : produit un système de coordonnées cartésiennes avec un “ratio d’aspect” fixe. Il existe également des systèmes de coordonnées non-linéaires, comme coord_polar() par exemple. 7.1.6 Les thèmes Il y a plusieurs thèmes existants dans le package ggplot2, theme_gray() est le thème par défaut ; les autres sont présentés dans la figure ci-dessous. Ensuite, la fonction theme() permet de modifier les aspects du graphique : il y a un certain nombre d’arguments disponibles qui permettent de modifier les éléments entourant le graphique comme les titre et sous-titre, les éléments à l’intérieur du graphique c’est-à-dire de la grille, les éléments des axes, ou encore les éléments de la légende (ou sa position sur la figure), etc. La figure ci-dessous est une bonne synthèse de la manière dont il faut programmer ces différentes éléments du thème d’un graphique (téléchargeable directement ici) : 7.1.7 Les autres options graphiques : titres, échelles des axes, etc. Pour le titre général, mais aussi les titres des axes, ainsi qu’une éventuelle légende, source, etc., on peut les rassembler dans la fonction labs() : labs( title = &quot; &quot;, subtitle = &quot; &quot;, x = &quot; &quot;, y = &quot; &quot;, caption = &quot; &quot;) Les axes des échelles peuvent être changés, ainsi que les valeurs affichées, avec les fonctions scale : si les variables sont quantitatives/continues, avec scale_x_continous() et scale_y_continuous() ; si les variables sont qualitatives/discrètes, avec scale_x_discrete() et scale_x_discrete() ; dont les options les plus souvent utilisées sont limits=, breaks=, labels=, ou encore trans= qui permet de transformer la mesure de l’échelle (exponentielle, log, …). Lorsqu’une option fill= ou color= est utilisée dans un aes, alors on peut modifier le type de couleurs ou palettes utilisées avec par exemple scale_fill_brewer() pour la pallette de couleur RBrewer ou scale_fill_viridis() pour la palette Viridis, etc. Il y a encore d’autres fonctions qui permettent de “customiser” à votre goût un graphique ggplot, il faut s’aventurer dans les diverses documentations plus complètes sur le package ggplot2. 7.1.8 Code minimal Après l’appel de la fonction ggplot(), chaque “couche” supplémentaire utilisée est précisée par le signe + et non l’habituel pipe %&gt;% pour bien signifier qu’on est toujours dans la fonction ggplot(), par ailleurs il faut faire attention de mettre le signe + à la fin d’une ligne et ensuite de faire un saut de ligne (le contraire saut de ligne et début de la ligne suivante avec le + ne fonctionnera pas). Les trois arguments obligatoires sont donc les 3 premières : “data”, “aesthethics” et “geometries”. En langage tidyverse, il existe plusieurs façons d’écrire le code : # Les 4 façons d&#39;écrire suivantes sont similaires : data %&gt;% # on spécifie la table de données ggplot() + # on appelle la fonction ggplot() aes(x = , y = ) + # on spécifie dans l&#39;aes() les variables à mettre dans l&#39;axe # des abcisses (x=) et dans l&#39;axe des ordonnées (y=) geom_histogram() # on trace l&#39;histogramme data %&gt;% ggplot(aes(x = , y = )) + geom_histogram() ggplot(data) + aes(x = , y = ) + geom_histogram() ggplot(data, aes(x = , y = )) + geom_histogram() Nous privilégierons ici la 1ère d’entre elles, mais vous pouvez en choisir une autre ! 7.1.9 Liens utiles pour aller plus loin Nous ne pouvons pas résumer l’ensemble des possibilités données par ggplot2 ; il faudra donc rechercher par soi-même si besoin. Voici pour cela deux sites très complets sur le package : https://ggplot2-book.org/toolbox.html https://bookdown.org/ael/rexplor/chap8.html#aes 7.2 Les grands principes de data visualization Sans prétendre, ni pouvoir, faire un cours complet de data visualization, voici quelques grands principes à essayer de respecter quand on souhaite représenter graphiquement des résultats issus du traitement de données : savoir au préalable le message principal que l’on souhaite faire passer : cela peut sembler évident, mais il faut toujour avoir cela en tête ; construire un graphique intelligible par le plus grand nombre : des graphiques trop sophistiqués, trop chargés d’informations, etc., ne permettront pas de transmettre le message souhaité. Cela peut bien sûr varier selon le public, mais… ; situer le graphique : avec un titre explicite, éventuellement un sous-titre, ensuite avec une légende reprenant le champ et/ou la source, etc. ; choisir le “bon” graphique selon le type de variables à représenter : variable continue ou discrète, croisement d’un type de variable avec un autre type, variables dépendant du temps (évolution), etc. ; présenter le graphique de manière la plus objective possible : ne pas “tordre” le graphique pour faire apparaître un résultat qui n’est pas si évident que cela (c’est typiquement l’exemple d’un changement d’échelle ; d’un “zoom” sur l’axe des ‘y’ sur un graphique en évolution par exemple, pour montrer des variations qui ne seraient pas visibles si l’axe commençait à 0) ; rajouter des informations (étiquettes de nom, valeur, etc.) sans trop surcharger le graphique néanmoins ; être logique dans la contruction des éléments extérieurs au graphe : par exemple, ordre des modalités d’une légende située à droite selon le point d’arrivée des courbes ; ordre des modalités d’une variable discrète (par exemple le niveau de diplôme) ou selon la moyenne/médiane d’une autre variable par ordre croissant ou décroissant ; utiliser (le plus possible) des axes similaires pour comparer deux grahes côte à cote. Ce chapitre de cours donne des conseils synthétiques : cf. ici ; ou cet article-là. "],["08-Ggplot-pratique.html", "Section8 Data Mining et Data Visualization en pratique 8.1 Exemple de la construction d’un graphique pas à pas 8.2 D’autres exemples à travers des exercices", " Section8 Data Mining et Data Visualization en pratique Reprenons la base de données sur les offres d’emplois de Pôle emploi (devenu France Travail) de l’année 2020 disponibles sur Paris et la petite couronne, et commençons notre analyse descriptive des informations présentes dans cette base en construisant des graphiques pour répondre à certaines questions relatives à ces ces offres d’emploi. On pourra ainsi étudier l’évolution au cours de l’année de ces offres d’emplois. # Appelons la table si elle n&#39;est pas déjà dans votre environnement OffresPE_2020 &lt;- readRDS(&quot;data/OffresPE_2020.Rdata&quot;) # Rappel des variables présentes et de leurs noms names(OffresPE_2020) [1] &quot;date_firstSeenDay&quot; &quot;date_scraping&quot; [3] &quot;date_sitePublicationDay&quot; &quot;job_title&quot; [5] &quot;job_ROME_code&quot; &quot;job_qualification&quot; [7] &quot;contractType&quot; &quot;contractDuration_min&quot; [9] &quot;contractDuration_max&quot; &quot;contractDuration_period&quot; [11] &quot;contractDuration_value&quot; &quot;workTime_hours&quot; [13] &quot;workTime_category&quot; &quot;workTime_value&quot; [15] &quot;location_label&quot; &quot;location_zipcode&quot; [17] &quot;location_departement&quot; &quot;salary_min&quot; [19] &quot;salary_max&quot; &quot;salary_period&quot; [21] &quot;salary_value&quot; &quot;salary_hourly_mean&quot; [23] &quot;salary_hourly_min&quot; &quot;salary_hourly_max&quot; [25] &quot;entreprise_nom&quot; &quot;entrepriseSecteur_NAF88&quot; [27] &quot;entrepriseSecteur_NAF21&quot; &quot;teleworking_mentioned&quot; [29] &quot;experience_min&quot; &quot;experience_max&quot; [31] &quot;education_level&quot; 8.1 Exemple de la construction d’un graphique pas à pas On va chercher à représenter la distribution de la durée des contrats (pour rappel exprimée en jours) pour les offres d’emplois en contrat à durée déterminée (CDD) et en intérim (MIS) en fonction du mois. Notre variable principale est donc contractDuration_value, et la variable “secondaire” ou fonction de la première sera à construite à partir de la date de publication de l’offre date_sitePublicationDay. Pour représenter la distribution d’une variable quantitative ou continue, on peut utiliser un histogramme (ou/et une courbe de densité), mais comme ici on veut la représenter selon une autre variable peut-être serait-il mieux d’utiliser une boîte à moustache qui donnera les principaux éléments de description de la distribution de cette variable. Nous avons déjà vu ces deux graphiques précédemment, mais reprenons-les pour voir dans le détail comment nous les construisons ! D’abord, on va créer une boîte à moustache pour représenter la distribution de la variable contractDuration_value: OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;)) %&gt;% ggplot() + aes(x = contractDuration_value) + geom_boxplot() Comme il reste des valeurs aberrantes (cf. section 3.2.3. de la séance 1 de ce cours) et des valeurs manquantes (objet de l’“Avis”), il faut un peu nettoyer la base, regardons plus précisément ces valeurs aberrantes en haut de la distribution : # Pour revoir cette distribution OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;)) %&gt;% arrange(desc(contractDuration_value)) %&gt;% select(contractType, contractDuration_value, contractDuration_period, contractDuration_min, contractDuration_max, job_title, entrepriseSecteur_NAF21) # A tibble: 92,563 × 7 contractType contractDuration_value contractDuration_period &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; 1 CDD 20656 YEAR 2 CDD 20656 YEAR 3 CDD 8262 YEAR 4 CDD 8262 YEAR 5 CDD 8262 YEAR 6 CDD 8262 YEAR 7 CDD 8262 YEAR 8 CDD 8262 YEAR 9 CDD 8262 YEAR 10 CDD 6656 YEAR # ℹ 92,553 more rows # ℹ 4 more variables: contractDuration_min &lt;dbl&gt;, contractDuration_max &lt;dbl&gt;, # job_title &lt;chr&gt;, entrepriseSecteur_NAF21 &lt;chr&gt; On voit qu’il y a vraisemblablement un problème pour les premières observations de ces valeurs aberrantes puisque la période dans laquelle la durée du contrat est exprimée (variable contractDuration_period) serait l’année, alors qu’il s’agit probablement plutôt de mois ou de jours étant donné les valeurs minimum et maximum, on va donc supprimer ces observations car il semble difficile de les modifier sans savoir quelle est la bonne temporalité dans laquelle elles sont exprimées et aussi car il ne s’agit que de 42 observations. OffresPE_2020 &lt;- OffresPE_2020 %&gt;% filter(!(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; contractDuration_period==&quot;YEAR&quot; &amp; contractDuration_value&gt;780)) OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value)) %&gt;% ggplot() + aes(x = contractDuration_value) + geom_boxplot() C’est plus lisible, même s’il reste des valeurs élevées et supérieures à la durée maximale d’un CDD dans le secteur privée qui est de 18 mois, soit environ 549 jours, mais il est possible d’avoir des CDD plus longs dans la fonctions publique, nous pouvonr éventuellement rajouter un filtre sur le secteur d’activité pour éviter d’avoir des offres émanant de l’administration publique pour pouvoir comparer ce qui est comparable ! Ou nous pouvons procéder à des paramétrages supplémentaires pour que la boxplot soit davantage visible. On peut par exemple utiliser une option pour mettre une échelle moins grande en abcisse. Plusieurs manières de faire existent, mais l’une d’entre elles équivaut à supprimer les valeurs, alors qu’une autre permet de les garder et juste de ne pas les faire apparaître sur le graphique, cela peut-être important si ensuite nous voulons ajoutons des statistiques comme la moyenne sur le boxplot, comme nous allons le voir. La première manière est d’utiliser l’argument scale_x_continuous() et l’option limits=c() pour indiquer les nouvelles valeurs de l’échelle, par exemple ici entre 1 et 2 000, mais un avertissement est alors donné : 1151 lignes ont été supprimées, si nous ajoutons ensuite la moyenne, elle sera calculée sans ces 1151 observations, cela peut donc changer les indicateurs de moyenne, voire de médiane, ce n’est donc pas rigoureux. Utilisons plutôt la seconde méthode maintenant, avec l’option xlim() à intégrer dans la fonction coord_cartesian() qui fait l’équivalent d’un zoom sur le graphique sans supprimer des observations : # 1ère méthode : # OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value)) %&gt;% # ggplot() + aes(x = contractDuration_value) + geom_boxplot() + # scale_x_continuous(limits = c(1, 550)) # 2nde méthode plus rigoureuse : OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value)) %&gt;% ggplot() + aes(x = contractDuration_value) + geom_boxplot() + coord_cartesian(xlim=c(0,550)) Ensuite, nous souhaitons représenter la distribution de cette variable selon le mois de publication de l’offre) : nous allons pour cela créer une variable mois_publication à partir d’une fonction relative à la date puis nous l’ordonnons ; et nous allons en profiter pour préciser un peu l’échelle des abscisses (réduire le “pas” avec l’option breaks=seq() en mettant tous les 30 jours pour voir à peu près les mois) : OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value)) %&gt;% mutate(mois_publication=months(date_sitePublicationDay, abbreviate = T), mois_publication = factor(mois_publication, levels = c(&quot;déc.&quot;,&quot;nov.&quot;,&quot;oct.&quot;,&quot;sept.&quot;, &quot;août&quot;, &quot;juil.&quot;, &quot;juin&quot;,&quot;mai&quot;,&quot;avr.&quot;, &quot;mars&quot;, &quot;févr.&quot;, &quot;janv.&quot;))) %&gt;% ggplot() + aes(x = contractDuration_value, y=mois_publication) + geom_boxplot() + coord_cartesian(xlim=c(0,550)) + scale_x_continuous(breaks=seq(0,550,30)) On voit que la médiane est plutôt stable entre les mois, sauf en mai et en avril, et par ailleurs les valeurs Q3 varient beaucoup entre les mois. Nous pouvons également ajouter la moyenne, puisqu’ici nous voyons de gauche à droite, le minimum, le 1er quartile, la médiane, le 3ème quartile, le maximum et les “outliers” (points aberrants selon les statistiques de la boxplot). Pour cela, il faut utiliser la “couche” statistique de ggplot() avec la fonction stat_summary() et les options fun = mean pour la moyenne, geom = point pour qu’elle soit représentée par un point, color=\"gray50\" pour qu’elle se différencie des autres points et soit en gris, et éventuellement size=2 pour jouer sur la taille du point. # Pour infos, les options de `geom =` dans `stat_summary()` sont par exemple : # &quot;point&quot;, &quot;pointrange&quot;, &quot;crossbar&quot;, &quot;bar&quot; (cell-ci à ne pas utiliser ici néanmoins !) OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value)) %&gt;% mutate(mois_publication=months(date_sitePublicationDay, abbreviate = T), mois_publication = factor(mois_publication, levels = c(&quot;déc.&quot;,&quot;nov.&quot;,&quot;oct.&quot;,&quot;sept.&quot;, &quot;août&quot;, &quot;juil.&quot;, &quot;juin&quot;,&quot;mai&quot;,&quot;avr.&quot;, &quot;mars&quot;, &quot;févr.&quot;, &quot;janv.&quot;))) %&gt;% ggplot() + aes(x = contractDuration_value, y=mois_publication) + geom_boxplot() + stat_summary(fun=mean, geom=&quot;point&quot;, color=&quot;gray50&quot;, size=2) + coord_cartesian(xlim=c(0,550)) + scale_x_continuous(breaks=seq(0,550,30)) On observe ainsi des différences entre la moyenne et la médiane, puisque la moyenne est toujours supérieure à la médiane puisque tirée par des valeurs plus souvent très élevées que très faibles (plus de points au-delà du maximum que l’inverse), mais elle semble moins varier selon les mois. On peut aussi vouloir enlever les outliers avec l’option outlier.shape de geom_boxplot() comme ceci : geom_boxplot(outlier.shape = NA). On peut encore vouloir ordonner l’affichage des années par ordre décroissant de la médiane ou de la moyenne (ordre décroissant ici = valeur la plus élevée en haut du graphique). Nous pouvons, entre autres, utiliser pour cela la fonction fct_reorder() du package forcats déjà présenté dans la section 3.2 de ce cours (Séance 1) : nous pouvons alors directement l’intégrer dans l’aes de ggplot dans la variable en ordonnée y=fct_reorder(), il faut pour cela mettre entre parenthèses la variable utilisée en ordonnée, suivie de la variable par laquelle on ordonne (la même que celle utilisée dans x=). Utilisée dans un boxplot, cela ordonne par défaut selon la médiane ; si on veut que les régions soient ordonnées par la moyenne, il faut rajouter l’option .fun=mean dans la fonction fct_reorder(), cf. le code en-dessous. OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value)) %&gt;% mutate(mois_publication=months(date_sitePublicationDay, abbreviate = T)) %&gt;% ggplot() + aes(x = contractDuration_value, y=fct_reorder(mois_publication, contractDuration_value, .fun=mean)) + geom_boxplot(outlier.shape = NA) + stat_summary(fun=mean, geom=&quot;point&quot;, color=&quot;gray50&quot;, size=2) + coord_cartesian(xlim=c(0,550)) + scale_x_continuous(breaks=seq(0,550,30)) On observe que les offres d’emploi avec des contrats légèrement plus longs sont plus probables au mois de septembre puis de novembre, alors qu’en début d’année civile (janvier et février) c’est là où les moyennes sont les plus basses. Cependant, comme ici notre seconde variable est une variable temporelle - le mois -, cela n’est pas forcément pertinent de modifier l’ordre du graphique pour le mettre selon la moyenne car cela pourrait perturber la lecture du graphique. On va revenir sur le graphique précédent donc. Nous arrivons à un graphique intéressant, il faut maintenant améliorer la description autour : noms des axes, titres, légende informative sous le graphique (avec notamment un avertissement sur les valeurs non affichées sur le graphique), éventuellement un peu de couleur (avec fill= non pas dans l’aes() mais dans la fonction geom_boxplot() pour qu’elle soit identique quel que soit le département), etc. Cela se fait avec la fonction labs(), et ensuite la fonction theme(). Une petite astuce pour les titres pour qu’ils ne soient pas coupés sur le graphe : \\n collé à un mot (sans espace) permet de mettre à la ligne à partir de ce mot ! OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value)) %&gt;% mutate(mois_publication=months(date_sitePublicationDay, abbreviate = T), mois_publication = factor(mois_publication, levels = c(&quot;déc.&quot;,&quot;nov.&quot;,&quot;oct.&quot;,&quot;sept.&quot;, &quot;août&quot;, &quot;juil.&quot;, &quot;juin&quot;,&quot;mai&quot;,&quot;avr.&quot;, &quot;mars&quot;, &quot;févr.&quot;, &quot;janv.&quot;))) %&gt;% ggplot() + aes(x = contractDuration_value, y=mois_publication) + geom_boxplot(outlier.shape = NA, fill=&quot;khaki&quot;) + stat_summary(fun=mean, geom=&quot;point&quot;, color=&quot;gray50&quot;, size=2) + coord_cartesian(xlim=c(0,550)) + scale_x_continuous(breaks=seq(0,550,30)) + labs(title=&quot;Distribution de la durée des offres d&#39;emploi en CDD et missions d&#39;intérim dans Paris \\net sa petite couronne en 2020&quot;, x=&quot;Durée du contrat proposé en mois&quot;, y=&quot;Mois&quot;, caption=&quot;Remarques : Les valeurs au-dessus de 550 jours soit 18 mois ne sont pas affichées ; les points \\nau-delà du minimum et maximum non plus ; les points en gris représentent la moyenne. \\nSource : Base &#39;JOCAS&#39;, offres d&#39;emploi émanant uniquement de Pôle emploi (auj. France Travail), 2020. \\nCalculs : Camille Signoretto.&quot;) + theme(plot.caption = element_text(hjust=0), plot.title = element_text(size=12), axis.title.x = element_text(size=10), axis.title.y = element_text(size=10)) Voilà un premier graphique construit avec la grammaire de ggplot(). À vous maintenant de construire vous-mêmes les graphiques qui vous sont suggérés dans la section suivante ! 8.2 D’autres exemples à travers des exercices 8.2.1 Distribution de la durée des contrats proposés, selon le type de contrat Construisez le même type de graphique mais cette fois à partir d’une densité de distribution selon le type de contrat - CDD ou intérim. N’hésitez pas à changer les options pour le mettre à votre goût !! OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value)) %&gt;% ggplot() + aes(x = contractDuration_value, fill = contractType) + geom_density(alpha = 0.4, color=NA) + coord_cartesian(xlim=c(0,550)) + scale_x_continuous(breaks=seq(0,550,30)) + labs(title=&quot;Distribution de la durée des offres d&#39;emploi en CDD et missions d&#39;intérim dans Paris \\net sa petite couronne en 2020&quot;, x=&quot;Durée du contrat proposé en mois&quot;, y=&quot;&quot;, fill=&quot;Type de contrat&quot;, caption=&quot;Remarques : Les valeurs au-dessus de 550 jours soit 18 mois ne sont pas affichées. \\nSource : Base &#39;JOCAS&#39;, offres d&#39;emploi émanant uniquement de Pôle emploi (auj. France Travail), 2020. \\nCalculs : Camille Signoretto.&quot;) + theme(plot.caption = element_text(hjust=0), plot.title = element_text(size=11), axis.title.x = element_text(size=10), axis.title.y = element_text(size=10)) 8.2.2 Comparaison des montants moyen et médian des durées de contrat des offres d’emplois, par secteur d’activité Construisez maintenant un graphique mettant l’un à côté de l’autre deux graphes en bâtons représentant respectivement la durée moyenne et la durée médiane des offres d’emploi selon le secteur d’activité. Pour vous aider si besoin, réfléchissez par étapes : il est bien de commencer par créer une variable en regroupant certains secteurs et en leur donnant un nom complet pour pouvoir plus facilement les identifier ; créer un premier graphe que vous assignerez à un nouvel objet et qui représentera celui de la moyenne par secteur ; vous pouvez pour cela créer une nouvelle variable qui constituera la moyenne pour chaque secteur (un conseil : arrondir à l’unité) ; sélectionnez les variables qui seront utilisées dans le graphique et vérifier (ou corriger sinon) qu’il n’y ait pas des doublons (lignes identiques) car cela peut fausser le graphique ; construisez le graphique avec ggplot() et la bonne fonction geom_***() ; faîtes de même pour la médiane par secteur ; vous pouvez ensuite mettre ces graphiques côte à côté avec le package patchwork (qu’il vous faudra probablement installer si c’est la première fois que vous l’utilisez), recherchez sur internet comment faire ensuite (c’est très simple !), puis mettez le même axe des ordonnées pour gagner de la place avec l’argument plot_layout(axes = \"collect\"), enfin ajoutez un titre et une légende générale avec la fonction plot_annotation(). OffresPE_2020 &lt;- OffresPE_2020 %&gt;% mutate(mois_publication=months(date_sitePublicationDay, abbreviate = T), secteurs=as.factor(case_when(entrepriseSecteur_NAF21 %in% c(&quot;C&quot;, &quot;D&quot;, &quot;E&quot;) ~ &quot;Industrie&quot;, entrepriseSecteur_NAF21 ==&quot;F&quot; ~ &quot;Construction&quot;, entrepriseSecteur_NAF21 ==&quot;G&quot; ~ &quot;Commerce&quot;, entrepriseSecteur_NAF21 ==&quot;H&quot; ~ &quot;Transports&quot;, entrepriseSecteur_NAF21 ==&quot;I&quot; ~ &quot;Hébergement/restauration&quot;, entrepriseSecteur_NAF21 ==&quot;J&quot; ~ &quot;Info/com&quot;, entrepriseSecteur_NAF21 %in% c(&quot;K&quot;, &quot;L&quot;) ~ &quot;Activités financières et immo&quot;, entrepriseSecteur_NAF21 ==&quot;M&quot; ~ &quot;Activités spécialisées, scientifiques et techniques&quot;, entrepriseSecteur_NAF21 ==&quot;N&quot; ~ &quot;Activités de services administratifs et de soutien&quot;, entrepriseSecteur_NAF21 ==&quot;O&quot; ~ &quot;Administration publique&quot;, entrepriseSecteur_NAF21 ==&quot;P&quot; ~ &quot;Enseignement&quot;, entrepriseSecteur_NAF21 ==&quot;Q&quot; ~ &quot;Santé humaine et action sociale&quot;, entrepriseSecteur_NAF21 ==&quot;R&quot; ~ &quot;Arts, spectacles et activités récréatives&quot;, entrepriseSecteur_NAF21 ==&quot;S&quot; ~ &quot;Autres activités de service&quot;, entrepriseSecteur_NAF21 ==&quot;T&quot; ~ &quot;Activités des ménages en tant qu&#39;employeurs&quot;, TRUE ~ entrepriseSecteur_NAF21))) # On va supprimer les 7 offres qui sont dans le secteur &quot;U&quot; &quot;Activités extra-territoriales&quot;... p1 &lt;- OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value) &amp; !entrepriseSecteur_NAF21==&quot;U&quot;) %&gt;% group_by(secteurs) %&gt;% mutate(moy_duree = round(mean(contractDuration_value))) %&gt;% select(moy_duree, secteurs) %&gt;% unique() %&gt;% ggplot() + aes(x = moy_duree, y = secteurs) + geom_bar(stat=&quot;identity&quot;, fill=&quot;honeydew&quot;) + geom_text(aes(label = moy_duree), position = position_stack(vjust = 0.5), color=&quot;gray25&quot;, size=2.8) + scale_x_continuous(breaks=seq(0,275,30)) + labs(title = &quot;Moyenne&quot;, x = &quot; &quot;, y = &quot; &quot;) + theme(axis.text.x = element_text(angle=90, vjust=0.5, size=8.5), plot.title = element_text(size=10.5)) p2 &lt;- OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value) &amp; !entrepriseSecteur_NAF21==&quot;U&quot;) %&gt;% group_by(secteurs) %&gt;% mutate(mediane_duree = round(median(contractDuration_value))) %&gt;% select(mediane_duree, secteurs) %&gt;% unique() %&gt;% ggplot() + aes(x = mediane_duree, y = secteurs) + geom_bar(stat=&quot;identity&quot;, fill=&quot;honeydew&quot;) + geom_text(aes(label = mediane_duree), position = position_stack(vjust = 0.5), color=&quot;gray25&quot;, size=2.8) + scale_x_continuous(breaks=seq(0,275,30)) + labs(title = &quot;Médiane&quot;, x = &quot; &quot;, y = &quot; &quot;) + theme(axis.text.x = element_text(angle=90, vjust=0.5, size=8.5), plot.title = element_text(size=10.5)) library(patchwork) (p1 + p2) + plot_layout(axes = &quot;collect&quot;) + plot_annotation(title = &quot;Durée (en mois) des CDD et intérim dans les offres d&#39;emploi sur Paris et sa petite couronne, \\nen 2020 et selon le secteur d&#39;activité&quot;, caption = &quot;Source : Base &#39;JOCAS&#39;, offres d&#39;emploi émanant uniquement de Pôle emploi (auj. France Travail), 2020. \\nCalculs : Camille Signoretto.&quot;, theme = theme(plot.title = element_text(size = 12), plot.caption = element_text(hjust = 0))) On observe que ce sont deux secteurs regroupant des activités publiques - administration et enseignement - qui proposent des contrats avec des durées (moyennes et médianes) relativement plus longues, ce qui peut être logique puisque le droit sur la durée des contrats à durée déterminée est justement différent. A l’inverse, deux secteurs des services - “Activités spécialisées, scientifiques et techniques”, et “Activités de services administratifs et de soutien” - présentent des durées moyennes et médianes relativement courtes ; on retrouve ensuite l’hébergement/restauration et la construction pour les moyennes, car les médianes sont toutes identiques au-delà des 4 premiers secteurs cités. On aurait pu sinon utilser un “dot plot”, comme ci-dessous. Cherchez comment l’on peut construire ce type de graphique (rq : cela ne correspond par à une fonction en tant que telle). Le début du code est le même, ce sont les fonctions geom_*** qui changent… library(&quot;ggrepel&quot;) p3 &lt;- OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value) &amp; !entrepriseSecteur_NAF21==&quot;U&quot;) %&gt;% group_by(secteurs) %&gt;% mutate(moy_duree = round(mean(contractDuration_value))) %&gt;% select(moy_duree, secteurs) %&gt;% unique() %&gt;% ggplot() + aes(x =moy_duree , y = secteurs) + geom_point(color=&quot;burlywood4&quot;, size=2) + geom_segment(aes(x=0, xend=moy_duree, y=secteurs), color=&quot;snow4&quot;) + geom_text_repel(aes(label = moy_duree), size = 2.5) + labs(title = &quot;Moyenne&quot;, x = &quot; &quot;, y = &quot; &quot;) + theme(plot.title = element_text(size=10.5)) p4 &lt;- OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value) &amp; !entrepriseSecteur_NAF21==&quot;U&quot;) %&gt;% group_by(secteurs) %&gt;% mutate(mediane_duree = round(median(contractDuration_value))) %&gt;% select(mediane_duree, secteurs) %&gt;% unique() %&gt;% ggplot() + aes(x =mediane_duree , y = secteurs) + geom_point(color=&quot;burlywood4&quot;, size=2) + geom_segment(aes(x=0, xend=mediane_duree, y=secteurs), color=&quot;snow4&quot;) + geom_text_repel(aes(label = mediane_duree), size = 2.5) + labs(title = &quot;Médiane&quot;, x = &quot; &quot;, y = &quot; &quot;) + theme(plot.title = element_text(size=10.5)) (p3 + p4) + plot_layout(axes = &quot;collect&quot;) + plot_annotation(title = &quot;Moyennes et médianes de la durée des contrats des offres d&#39;emploi en CDD et intérim sur Paris et \\nsa petite couronne, en 2020 et selon le secteur d&#39;activité&quot;, caption = &quot;Source : Base &#39;JOCAS&#39;, offres d&#39;emploi émanant uniquement de Pôle emploi (auj. France Travail), 2020. \\nCalculs : Camille Signoretto.&quot;, theme = theme(plot.title = element_text(size = 12), plot.caption = element_text(hjust = 0))) 8.2.3 Evolution de la durée des contrats des offres d’emploi durant l’année 2020 Changeons un peu de perspective et construisez cette fois un graphique montrant l’évolution de la durée des contrats des offres d’emploi durant l’année 2020 à Paris et sa petite couronne, de manière générale et ensuite selon 6 secteurs choisis selon leur durée médiane mise en avant un peu plus haut : les 3 ayant les durées moyennes les plus élevées (“Administration publique”, “Enseignement”, et “Arts, spectacles et activités récréatives”), et les 3 ayant les durées moyennes les moins élevées (“Activités spécialisées, scientifiques et techniques”, “Activités de services administratifs et de soutien”, et “Hébergement/restauration”). On peut vouloir le rendre interactif de telle sorte que l’utilisateur puisse voir les valeurs des points en passant la souris dessus : pour cela, il faut installer et charge le package plotly puis utiliserla fonction ggplotly() ; cela nécessite de stocker le graphique dans un objet. De même, il faut procéder par étapes : créer la variable de prix moyen de durée selon le mois ; ne garder que ces variables, supprimer les lignes doublons le cas échéant ; construir un graphique sous forme de courbes avec des points représentants les valeurs en le stockant dans un objet ; appeler la fonction ggplotly() en utilisant l’argument tooltip() pour que seule la valeur des “y” soit affichée.. g_evo &lt;- OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value) &amp; !entrepriseSecteur_NAF21==&quot;U&quot;) %&gt;% group_by(mois_publication) %&gt;% mutate(moy_duree = round(mean(contractDuration_value)), mois_publication = factor(mois_publication, levels = c(&quot;janv.&quot;,&quot;févr.&quot;,&quot;mars&quot;,&quot;avr.&quot;,&quot;mai&quot;,&quot;juin&quot;, &quot;juil.&quot;,&quot;août&quot;,&quot;sept.&quot;,&quot;oct.&quot;,&quot;nov.&quot;,&quot;déc.&quot;))) %&gt;% select(moy_duree, mois_publication) %&gt;% unique() %&gt;% ggplot() + aes(x = mois_publication, y = moy_duree) + geom_point() + geom_line(group=1) + scale_y_continuous(limits=c(90,180), breaks = seq(90,180,15)) + labs(title = &quot;Evolution de la durée moyenne des contrats dans les offres d&#39;emplois en CDD et intérim sur \\nParis et sa petite couronne en 2020&quot;, x = &quot; &quot;, y = &quot; &quot;) + theme(plot.title = element_text(size=12), plot.caption = element_text(hjust=0)) #install.packages(&quot;plotly&quot;) library(plotly) ggplotly(g_evo, tooltip = c(&quot;moy_duree&quot;)) %&gt;% layout(margin = list(l = 50, r = 50, b = 80, t = 50), annotations = list(text = &quot;Source : Source : Base &#39;JOCAS&#39;, offres d&#39;emploi émanant uniquement de Pôle emploi (auj. France Travail), 2020. \\nCalculs : Camille Signoretto. \\nNote : l&#39;axe des ordonnées ne commence qu&#39;à 90 jours (3 mois).&quot;, showarrow = F, x = 0, y = -0.2, xref=&#39;paper&#39;, yref=&#39;paper&#39;, xanchor=&#39;left&#39;, yanchor=&#39;auto&#39;, xshift=0, yshift=0, font=list(size=10.5), align=&quot;left&quot;)) On retrouve un résultat que l’on avait observé précédemment avec la boxplot, à savoir que la durée moyenne des contrats est plus faible en début d’année civiel et connaît deux “pics”, en septembre puis en novembre. Regardons maintenant selon quelques secteurs d’activité (les 6 mentionnés au-dessus), pour étudier si cette évolution est différente selon la position du secteur dans l’échelle des durées moyennes. g_evo_pls &lt;- OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value) &amp; secteurs %in% c(&quot;Administration publique&quot;, &quot;Enseignement&quot;, &quot;Arts, spectacles et activités récréatives&quot;, &quot;Hébergement/restauration&quot;, &quot;Activités spécialisées, scientifiques et techniques&quot;, &quot;Activités de services administratifs et de soutien&quot;)) %&gt;% group_by(mois_publication, secteurs) %&gt;% mutate(moy_duree = round(mean(contractDuration_value),0), mois_publication = factor(mois_publication, levels = c(&quot;janv.&quot;,&quot;févr.&quot;,&quot;mars&quot;,&quot;avr.&quot;,&quot;mai&quot;,&quot;juin&quot;, &quot;juil.&quot;,&quot;août&quot;,&quot;sept.&quot;,&quot;oct.&quot;,&quot;nov.&quot;,&quot;déc.&quot;))) %&gt;% select(moy_duree, mois_publication, secteurs) %&gt;% unique() %&gt;% mutate(secteurs=factor(secteurs, levels = c(&quot;Administration publique&quot;, &quot;Enseignement&quot;, &quot;Arts, spectacles et activités récréatives&quot;, &quot;Activités spécialisées, scientifiques et techniques&quot;, &quot;Activités de services administratifs et de soutien&quot;, &quot;Hébergement/restauration&quot;))) %&gt;% ggplot() + aes(x=mois_publication, y=moy_duree, color=secteurs) + geom_line(aes(group=secteurs), linewidth=0.8) + scale_y_continuous(limits=c(75,425), breaks = seq(75,425,15)) + labs(title=&quot;Evolution de la durée moyenne des contrats dans les offres d&#39;emplois en CDD et missions d&#39;intérim sur Paris \\net sa petite couronne en 2020, dans les trois secteurs ayant les moyennes les plus élevées et les 3 secteurs \\nayant les moyennes les plus faibles&quot;, x = &quot; &quot;, y = &quot; &quot;, color=&quot;Secteurs&quot;) + theme(plot.title = element_text(size=10), legend.title = element_text(size=10), plot.caption = element_text(hjust=0)) ggplotly(g_evo_pls, tooltip = c(&quot;moy_duree&quot;)) %&gt;% layout(margin = list(l = 50, r = 50, b = 80, t = 80), annotations = list(text = &quot;Source : Source : Base &#39;JOCAS&#39;, offres d&#39;emploi émanant uniquement de Pôle emploi (auj. France Travail), 2020. \\nCalculs : Camille Signoretto. \\nNote : l&#39;axe des ordonnées ne commence qu&#39;à 75 jours (2 mois et demi).&quot;, showarrow = F, x = 0, y = -0.2, xref=&#39;paper&#39;, yref=&#39;paper&#39;, xanchor=&#39;left&#39;, yanchor=&#39;auto&#39;, xshift=0, yshift=0, font=list(size=9), align=&quot;left&quot;)) On observe une saisonnalité beaucoup plus importante dans la durée des contrats proposés selon les secteurs, la volatilité la plus grande de la durée moyenne des contrats est présente dans le secteur des “arts, spectacles et activités récréatives”. Cela peut être dû en partie à cette année 2020, particulière du fait de la crise sanitaire du Covid-19. Il faudrait bien sûr creuser davantage pour mieux comprendre ces évolutions de la durée moyenne des contrats proposés selon les secteurs d’activité et les mois. 8.2.4 Top 5 de la durée moyenne des offres d’emploi en CDD et missions d’intérim selon les secteurs d’activité Enfin, construisez un graphique en bâtons indiquant les seuls 5 premiers secteurs d’activité ayant les durées moyennes des offres d’emploi en CDD et missions d’intérim les plus élevés, puis les durées médianes, et les mettre côte à côte. p5 &lt;- OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value) &amp; secteurs %in% c(&quot;Administration publique&quot;, &quot;Enseignement&quot;, &quot;Arts, spectacles et activités récréatives&quot;, &quot;Hébergement/restauration&quot;, &quot;Activités spécialisées, scientifiques et techniques&quot;, &quot;Activités de services administratifs et de soutien&quot;)) %&gt;% group_by(secteurs) %&gt;% summarise(moy_duree = round(mean(contractDuration_value))) %&gt;% arrange(desc(moy_duree)) %&gt;% slice(1:5) %&gt;% ggplot() + aes(x = moy_duree, y = fct_reorder(secteurs, moy_duree)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;darkgoldenrod1&quot;) + geom_text(aes(label=moy_duree), position = position_stack(vjust=0.5), size=2.5) + labs(title=&quot;Durée moyenne en jours&quot;, x = &quot;&quot;, y = &quot; &quot;) + theme_classic() + theme(legend.position = &quot;none&quot;, plot.title=element_text(size=9), axis.text.y = element_text(size=8), axis.text.x = element_text(size=8), axis.title.x = element_text(size=8)) p6 &lt;- OffresPE_2020 %&gt;% filter(contractType %in% c(&quot;CDD&quot;, &quot;MIS&quot;) &amp; !is.na(contractDuration_value) &amp; secteurs %in% c(&quot;Administration publique&quot;, &quot;Enseignement&quot;, &quot;Arts, spectacles et activités récréatives&quot;, &quot;Hébergement/restauration&quot;, &quot;Activités spécialisées, scientifiques et techniques&quot;, &quot;Activités de services administratifs et de soutien&quot;)) %&gt;% group_by(secteurs) %&gt;% summarise(mediane_duree = round(median(contractDuration_value)), moy_duree = round(mean(contractDuration_value))) %&gt;% arrange(desc(mediane_duree)) %&gt;% slice(1:5) %&gt;% ggplot() + aes(x = mediane_duree, y = fct_reorder(secteurs, moy_duree)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;coral1&quot;) + geom_text(aes(label=mediane_duree), position = position_stack(vjust=0.5), size=2.5) + labs(title=&quot;Durée médiane en jours&quot;, x = &quot;&quot;, y = &quot; &quot;) + theme_classic() + theme(legend.position = &quot;none&quot;, plot.title=element_text(size=9), axis.text.y = element_text(size=8), axis.text.x = element_text(size=8), axis.title.x = element_text(size=8)) (p5 + p6) + plot_layout(axes = &quot;collect&quot;) + plot_annotation(title = &quot;Top 5 des secteurs d&#39;activité ayant des offres d&#39;emploi en CDD et missions d&#39;intérim \\navec les durées moyennes les plus élevées&quot;, caption = &quot;Source : Source : Base &#39;JOCAS&#39;, offres d&#39;emploi émanant uniquement de Pôle emploi (auj. France Travail), 2020. \\nCalculs : Camille Signoretto.&quot;, theme = theme(plot.title = element_text(size = 12))) &amp; theme(plot.caption = element_text(hjust = 0)) On retrouve les mêmes résultats. 8.2.5 À vous de “jouer” ! Bien sûr, vous pouvez créer des fonctions sur ces graphiques ; puis “jouez” avec d’autres variables ; ou encore construire des cartes sur le niveau commune ; utiliser d’autres types de graphiques ; etc. ; etc. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
